
ass-v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001754  000017e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001754  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014b  00800126  00800126  0000180e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b34  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c3  00000000  00000000  000046b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000175b  00000000  00000000  0000597b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a4  00000000  00000000  000070d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e56  00000000  00000000  0000787c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b60  00000000  00000000  000086d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000a232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_5>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_16>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_20>
      54:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_21>
      58:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      5c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      60:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      64:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      68:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      6c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      70:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      74:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      78:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2269>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2246>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
      b4:	6f 6a 65 63 74 20 62 79 20 53 74 65 70 68 65 6e     oject by Stephen
      c4:	20 47 6f 6f 64 68 69 6c 6c 20 2d 20 34 34 38 35      Goodhill - 4485
      d4:	32 35 39 33 00                                      2593.

000000d9 <__c.2244>:
      d9:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

000000e3 <numbers>:
      e3:	4e 01 4b 01 47 01 43 01 3f 01 3b 01 37 01 33 01     N.K.G.C.?.;.7.3.
      f3:	2f 01 2b 01                                         /.+.

000000f7 <letters>:
      f7:	bd 01 b9 01 b5 01 b1 01 ad 01 a9 01 a5 01 a1 01     ................
     107:	9e 01 9a 01 96 01 92 01 8d 01 89 01 85 01 81 01     ................
     117:	7c 01 78 01 74 01 6f 01 6b 01 66 01 61 01 5c 01     |.x.t.o.k.f.a.\.
     127:	57 01 52 01                                         W.R.

0000012b <cols_9>:
     12b:	64 92 92 7d                                         d..}

0000012f <cols_8>:
     12f:	6c 92 92 6d                                         l..m

00000133 <cols_7>:
     133:	80 9e a0 c1                                         ....

00000137 <cols_6>:
     137:	7c 92 92 4d                                         |..M

0000013b <cols_5>:
     13b:	e4 a2 a2 9d                                         ....

0000013f <cols_4>:
     13f:	18 28 48 ff                                         .(H.

00000143 <cols_3>:
     143:	44 92 92 6d                                         D..m

00000147 <cols_2>:
     147:	46 8a 92 63                                         F..c

0000014b <cols_1>:
     14b:	42 fe 03                                            B..

0000014e <cols_0>:
     14e:	7c 92 a2 7d                                         |..}

00000152 <cols_Z>:
     152:	86 8a 92 a2 c3                                      .....

00000157 <cols_Y>:
     157:	e0 10 0e 10 e1                                      .....

0000015c <cols_X>:
     15c:	c6 28 10 28 c7                                      .(.(.

00000161 <cols_W>:
     161:	fc 02 1c 02 fd                                      .....

00000166 <cols_V>:
     166:	f8 04 02 04 f9                                      .....

0000016b <cols_U>:
     16b:	fc 02 02 fd                                         ....

0000016f <cols_T>:
     16f:	80 80 fe 80 81                                      .....

00000174 <cols_S>:
     174:	64 92 92 4d                                         d..M

00000178 <cols_R>:
     178:	fe 90 98 67                                         ...g

0000017c <cols_Q>:
     17c:	7c 82 8a 7c 03                                      |..|.

00000181 <cols_P>:
     181:	fe 90 90 61                                         ...a

00000185 <cols_O>:
     185:	7c 82 82 7d                                         |..}

00000189 <cols_N>:
     189:	fe 20 10 ff                                         . ..

0000018d <cols_M>:
     18d:	fe 40 30 40 ff                                      .@0@.

00000192 <cols_L>:
     192:	fe 02 02 03                                         ....

00000196 <cols_K>:
     196:	fe 10 28 c7                                         ..(.

0000019a <cols_J>:
     19a:	04 02 02 fd                                         ....

0000019e <cols_I>:
     19e:	82 fe 83                                            ...

000001a1 <cols_H>:
     1a1:	fe 10 10 ff                                         ....

000001a5 <cols_G>:
     1a5:	7c 82 92 5d                                         |..]

000001a9 <cols_F>:
     1a9:	fe 90 90 81                                         ....

000001ad <cols_E>:
     1ad:	fe 92 92 83                                         ....

000001b1 <cols_D>:
     1b1:	fe 82 82 7d                                         ...}

000001b5 <cols_C>:
     1b5:	7c 82 82 45                                         |..E

000001b9 <cols_B>:
     1b9:	fe 92 92 6d                                         ...m

000001bd <cols_A>:
     1bd:	7e 90 90 7f                                         ~...

000001c1 <__c.2040>:
     1c1:	1b 5b 32 4a 00                                      .[2J.

000001c6 <__c.2025>:
     1c6:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf ef       	ldi	r28, 0xFF	; 255
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	11 e0       	ldi	r17, 0x01	; 1
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	e4 e5       	ldi	r30, 0x54	; 84
     1e4:	f7 e1       	ldi	r31, 0x17	; 23
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	a6 32       	cpi	r26, 0x26	; 38
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
     1f2:	22 e0       	ldi	r18, 0x02	; 2
     1f4:	a6 e2       	ldi	r26, 0x26	; 38
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a1 37       	cpi	r26, 0x71	; 113
     1fe:	b2 07       	cpc	r27, r18
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 b1 04 	call	0x962	; 0x962 <main>
     206:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <_exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     20e:	e8 e6       	ldi	r30, 0x68	; 104
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	82 60       	ori	r24, 0x02	; 2
     216:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     218:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     21a:	ec e6       	ldi	r30, 0x6C	; 108
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8f 60       	ori	r24, 0x0F	; 15
     222:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     224:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
     228:	08 95       	ret

0000022a <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     22a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     22e:	18 16       	cp	r1, r24
     230:	3c f5       	brge	.+78     	; 0x280 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     232:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     236:	6f b7       	in	r22, 0x3f	; 63
		cli();
     238:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     23a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <__data_end>
     23e:	92 30       	cpi	r25, 0x02	; 2
     240:	b4 f0       	brlt	.+44     	; 0x26e <button_pushed+0x44>
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     248:	f9 01       	movw	r30, r18
     24a:	e9 5d       	subi	r30, 0xD9	; 217
     24c:	fe 4f       	sbci	r31, 0xFE	; 254
     24e:	40 81       	ld	r20, Z
     250:	f9 01       	movw	r30, r18
     252:	ea 5d       	subi	r30, 0xDA	; 218
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     258:	9f 5f       	subi	r25, 0xFF	; 255
     25a:	29 2f       	mov	r18, r25
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <__data_end>
     262:	04 2e       	mov	r0, r20
     264:	00 0c       	add	r0, r0
     266:	55 0b       	sbc	r21, r21
     268:	24 17       	cp	r18, r20
     26a:	35 07       	cpc	r19, r21
     26c:	6c f3       	brlt	.-38     	; 0x248 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     26e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <__data_end>
     272:	91 50       	subi	r25, 0x01	; 1
     274:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <__data_end>
		
		if(interrupts_were_enabled) {
     278:	66 23       	and	r22, r22
     27a:	1c f4       	brge	.+6      	; 0x282 <button_pushed+0x58>
			// Turn them back on again
			sei();
     27c:	78 94       	sei
     27e:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     280:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     282:	08 95       	ret

00000284 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	2f 93       	push	r18
     290:	3f 93       	push	r19
     292:	4f 93       	push	r20
     294:	5f 93       	push	r21
     296:	6f 93       	push	r22
     298:	7f 93       	push	r23
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
     29e:	ef 93       	push	r30
     2a0:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2a2:	43 b1       	in	r20, 0x03	; 3
     2a4:	4f 70       	andi	r20, 0x0F	; 15
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2aa:	64 2f       	mov	r22, r20
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__data_end>
     2b2:	24 30       	cpi	r18, 0x04	; 4
     2b4:	04 f5       	brge	.+64     	; 0x2f6 <__vector_5+0x72>
     2b6:	9b 01       	movw	r18, r22
     2b8:	08 2e       	mov	r0, r24
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__vector_5+0x3c>
     2bc:	35 95       	asr	r19
     2be:	27 95       	ror	r18
     2c0:	0a 94       	dec	r0
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <__vector_5+0x38>
     2c4:	20 ff       	sbrs	r18, 0
     2c6:	17 c0       	rjmp	.+46     	; 0x2f6 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     2c8:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	08 2e       	mov	r0, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_5+0x52>
     2d2:	35 95       	asr	r19
     2d4:	27 95       	ror	r18
     2d6:	0a 94       	dec	r0
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <__vector_5+0x4e>
     2da:	20 fd       	sbrc	r18, 0
     2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     2de:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__data_end>
     2e2:	21 e0       	ldi	r18, 0x01	; 1
     2e4:	2e 0f       	add	r18, r30
     2e6:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__data_end>
     2ea:	0e 2e       	mov	r0, r30
     2ec:	00 0c       	add	r0, r0
     2ee:	ff 0b       	sbc	r31, r31
     2f0:	e9 5d       	subi	r30, 0xD9	; 217
     2f2:	fe 4f       	sbci	r31, 0xFE	; 254
     2f4:	80 83       	st	Z, r24
     2f6:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     2f8:	84 30       	cpi	r24, 0x04	; 4
     2fa:	91 05       	cpc	r25, r1
     2fc:	c1 f6       	brne	.-80     	; 0x2ae <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     2fe:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <last_button_state>
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	7f 91       	pop	r23
     30c:	6f 91       	pop	r22
     30e:	5f 91       	pop	r21
     310:	4f 91       	pop	r20
     312:	3f 91       	pop	r19
     314:	2f 91       	pop	r18
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <redraw_base>:
	redraw_base(COLOUR_BASE);
	redraw_all_asteroids();	
	redraw_all_projectiles();
}

static void redraw_base(uint8_t colour){
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	18 2f       	mov	r17, r24
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition+1; x++) {
     328:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <basePosition>
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	89 0f       	add	r24, r25
     330:	48 2f       	mov	r20, r24
     332:	08 2e       	mov	r0, r24
     334:	00 0c       	add	r0, r0
     336:	55 0b       	sbc	r21, r21
     338:	29 2f       	mov	r18, r25
     33a:	09 2e       	mov	r0, r25
     33c:	00 0c       	add	r0, r0
     33e:	33 0b       	sbc	r19, r19
     340:	2f 5f       	subi	r18, 0xFF	; 255
     342:	3f 4f       	sbci	r19, 0xFF	; 255
     344:	24 17       	cp	r18, r20
     346:	35 07       	cpc	r19, r21
     348:	e4 f0       	brlt	.+56     	; 0x382 <redraw_base+0x62>
     34a:	d8 e0       	ldi	r29, 0x08	; 8
     34c:	d9 1b       	sub	r29, r25
     34e:	c8 2f       	mov	r28, r24
		if (x >= 0 && x < FIELD_WIDTH) {
     350:	88 30       	cpi	r24, 0x08	; 8
     352:	28 f4       	brcc	.+10     	; 0x35e <redraw_base+0x3e>
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
     354:	41 2f       	mov	r20, r17
     356:	6d 2f       	mov	r22, r29
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ledmatrix_update_pixel>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	8c 0f       	add	r24, r28
}

static void redraw_base(uint8_t colour){
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition+1; x++) {
     362:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <basePosition>
     366:	d1 50       	subi	r29, 0x01	; 1
     368:	48 2f       	mov	r20, r24
     36a:	08 2e       	mov	r0, r24
     36c:	00 0c       	add	r0, r0
     36e:	55 0b       	sbc	r21, r21
     370:	29 2f       	mov	r18, r25
     372:	09 2e       	mov	r0, r25
     374:	00 0c       	add	r0, r0
     376:	33 0b       	sbc	r19, r19
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	24 17       	cp	r18, r20
     37e:	35 07       	cpc	r19, r21
     380:	34 f7       	brge	.-52     	; 0x34e <redraw_base+0x2e>
		if (x >= 0 && x < FIELD_WIDTH) {
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
     382:	67 e0       	ldi	r22, 0x07	; 7
     384:	69 1b       	sub	r22, r25
     386:	41 2f       	mov	r20, r17
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ledmatrix_update_pixel>
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	08 95       	ret

00000396 <redraw_projectile>:

static void redraw_projectile(uint8_t projectileNumber, uint8_t colour) {
	uint8_t projectilePosn;
	
	// Check projectileNumber is valid - ignore otherwise
	if(projectileNumber < numProjectiles) {
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <numProjectiles>
     39c:	02 2e       	mov	r0, r18
     39e:	00 0c       	add	r0, r0
     3a0:	33 0b       	sbc	r19, r19
     3a2:	82 17       	cp	r24, r18
     3a4:	93 07       	cpc	r25, r19
     3a6:	6c f4       	brge	.+26     	; 0x3c2 <redraw_projectile+0x2c>
     3a8:	46 2f       	mov	r20, r22
		projectilePosn = projectiles[projectileNumber];
     3aa:	fc 01       	movw	r30, r24
     3ac:	e7 5c       	subi	r30, 0xC7	; 199
     3ae:	fe 4f       	sbci	r31, 0xFE	; 254
     3b0:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(projectilePosn), colour);
     3b2:	98 2f       	mov	r25, r24
     3b4:	92 95       	swap	r25
     3b6:	9f 70       	andi	r25, 0x0F	; 15
     3b8:	67 e0       	ldi	r22, 0x07	; 7
     3ba:	69 1b       	sub	r22, r25
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ledmatrix_update_pixel>
     3c2:	08 95       	ret

000003c4 <initialise_game>:
 
// Initialise game field:
// (1) base starts in the centre (x=3)
// (2) no projectiles initially
// (3) the maximum number of asteroids, randomly distributed.
void initialise_game(void) {
     3c4:	4f 92       	push	r4
     3c6:	5f 92       	push	r5
     3c8:	6f 92       	push	r6
     3ca:	7f 92       	push	r7
     3cc:	8f 92       	push	r8
     3ce:	9f 92       	push	r9
     3d0:	af 92       	push	r10
     3d2:	bf 92       	push	r11
     3d4:	ef 92       	push	r14
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
	uint8_t x, y, i;
	
    basePosition = 3;
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <basePosition>
	numProjectiles = 0;
     3e6:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <numProjectiles>
	numAsteroids = 0;
     3ea:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <numAsteroids>
     3ee:	0e e3       	ldi	r16, 0x3E	; 62
     3f0:	11 e0       	ldi	r17, 0x01	; 1
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f2 e5       	ldi	r31, 0x52	; 82
     3f6:	ef 2e       	mov	r14, r31
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	ff 2e       	mov	r15, r31
     3fc:	f0 2d       	mov	r31, r0
// Check whether there is an asteroid at a given position.
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     3fe:	0f 2e       	mov	r0, r31
     400:	fd e0       	ldi	r31, 0x0D	; 13
     402:	8f 2e       	mov	r8, r31
     404:	91 2c       	mov	r9, r1
     406:	a1 2c       	mov	r10, r1
     408:	b1 2c       	mov	r11, r1
     40a:	f0 2d       	mov	r31, r0
	for(i=0; i < numAsteroids; i++) {
		if(asteroids[i] == positionToCheck) {
     40c:	e8 01       	movw	r28, r16
		// Generate random position that does not already
		// have an asteroid.
		do {
			// Generate random x position - somewhere from 0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
     40e:	0e 94 03 08 	call	0x1006	; 0x1006 <random>
     412:	2b 01       	movw	r4, r22
     414:	3c 01       	movw	r6, r24
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     416:	0e 94 03 08 	call	0x1006	; 0x1006 <random>
// Check whether there is an asteroid at a given position.
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     41a:	a5 01       	movw	r20, r10
     41c:	94 01       	movw	r18, r8
     41e:	0e 94 77 07 	call	0xeee	; 0xeee <__divmodsi4>
     422:	6d 5f       	subi	r22, 0xFD	; 253
     424:	26 2f       	mov	r18, r22
     426:	2f 70       	andi	r18, 0x0F	; 15
     428:	d3 01       	movw	r26, r6
     42a:	c2 01       	movw	r24, r4
     42c:	87 70       	andi	r24, 0x07	; 7
     42e:	99 27       	eor	r25, r25
     430:	aa 27       	eor	r26, r26
     432:	b0 78       	andi	r27, 0x80	; 128
     434:	bb 23       	and	r27, r27
     436:	54 f4       	brge	.+20     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	a1 09       	sbc	r26, r1
     43c:	b1 09       	sbc	r27, r1
     43e:	88 6f       	ori	r24, 0xF8	; 248
     440:	9f 6f       	ori	r25, 0xFF	; 255
     442:	af 6f       	ori	r26, 0xFF	; 255
     444:	bf 6f       	ori	r27, 0xFF	; 255
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	a1 1d       	adc	r26, r1
     44a:	b1 1d       	adc	r27, r1
     44c:	30 e1       	ldi	r19, 0x10	; 16
     44e:	83 9f       	mul	r24, r19
     450:	b0 01       	movw	r22, r0
     452:	11 24       	eor	r1, r1
     454:	62 2b       	or	r22, r18
	for(i=0; i < numAsteroids; i++) {
     456:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <numAsteroids>
     45a:	43 2f       	mov	r20, r19
     45c:	03 2e       	mov	r0, r19
     45e:	00 0c       	add	r0, r0
     460:	55 0b       	sbc	r21, r21
     462:	14 16       	cp	r1, r20
     464:	15 06       	cpc	r1, r21
     466:	a4 f4       	brge	.+40     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		if(asteroids[i] == positionToCheck) {
     468:	88 81       	ld	r24, Y
     46a:	68 17       	cp	r22, r24
     46c:	81 f2       	breq	.-96     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	09 c0       	rjmp	.+18     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     472:	fc 01       	movw	r30, r24
     474:	e2 5c       	subi	r30, 0xC2	; 194
     476:	fe 4f       	sbci	r31, 0xFE	; 254
     478:	80 81       	ld	r24, Z
     47a:	68 13       	cpse	r22, r24
     47c:	03 c0       	rjmp	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			x = (uint8_t)(random() % FIELD_WIDTH);
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
		} while(asteroid_at(x,y) != -1);
     47e:	2f 3f       	cpi	r18, 0xFF	; 255
     480:	31 f6       	brne	.-116    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     484:	2f 5f       	subi	r18, 0xFF	; 255
     486:	82 2f       	mov	r24, r18
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	84 17       	cp	r24, r20
     48c:	95 07       	cpc	r25, r21
     48e:	8c f3       	brlt	.-30     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
		} while(asteroid_at(x,y) != -1);
		// If we get here, we've now found an x,y location without
		// an existing asteroid - record the position
		asteroids[i] = GAME_POSITION(x,y);
     490:	f8 01       	movw	r30, r16
     492:	61 93       	st	Z+, r22
     494:	8f 01       	movw	r16, r30
		numAsteroids++;
     496:	3f 5f       	subi	r19, 0xFF	; 255
     498:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <numAsteroids>
	
    basePosition = 3;
	numProjectiles = 0;
	numAsteroids = 0;

	for(i=0; i < MAX_ASTEROIDS ; i++) {
     49c:	ee 15       	cp	r30, r14
     49e:	ff 05       	cpc	r31, r15
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a2:	b5 cf       	rjmp	.-150    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

// Redraw the whole display - base, asteroids and projectiles.
// We assume all of the data structures have been appropriately poplulated
static void redraw_whole_display(void) {
	// clear the display
	ledmatrix_clear();
     4a4:	0e 94 9b 03 	call	0x736	; 0x736 <ledmatrix_clear>
	
	// Redraw each of the elements
	redraw_base(COLOUR_BASE);
     4a8:	8f ed       	ldi	r24, 0xDF	; 223
     4aa:	0e 94 90 01 	call	0x320	; 0x320 <redraw_base>
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
}

static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     4ae:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <numAsteroids>
     4b2:	08 2e       	mov	r0, r24
     4b4:	00 0c       	add	r0, r0
     4b6:	99 0b       	sbc	r25, r25
     4b8:	18 16       	cp	r1, r24
     4ba:	19 06       	cpc	r1, r25
     4bc:	fc f4       	brge	.+62     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	c0 e0       	ldi	r28, 0x00	; 0

static void redraw_asteroid(uint8_t asteroidNumber, uint8_t colour) {
	uint8_t asteroidPosn;
	if(asteroidNumber < numAsteroids) {
		asteroidPosn = asteroids[asteroidNumber];
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(asteroidPosn), colour);
     4c4:	d7 e0       	ldi	r29, 0x07	; 7
	}
}

static void redraw_asteroid(uint8_t asteroidNumber, uint8_t colour) {
	uint8_t asteroidPosn;
	if(asteroidNumber < numAsteroids) {
     4c6:	28 17       	cp	r18, r24
     4c8:	39 07       	cpc	r19, r25
     4ca:	6c f4       	brge	.+26     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
		asteroidPosn = asteroids[asteroidNumber];
     4cc:	f9 01       	movw	r30, r18
     4ce:	e2 5c       	subi	r30, 0xC2	; 194
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(asteroidPosn), colour);
     4d4:	98 2f       	mov	r25, r24
     4d6:	92 95       	swap	r25
     4d8:	9f 70       	andi	r25, 0x0F	; 15
     4da:	6d 2f       	mov	r22, r29
     4dc:	69 1b       	sub	r22, r25
     4de:	40 ef       	ldi	r20, 0xF0	; 240
     4e0:	8f 70       	andi	r24, 0x0F	; 15
     4e2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <ledmatrix_update_pixel>
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
}

static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	2c 2f       	mov	r18, r28
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <numAsteroids>
     4f0:	08 2e       	mov	r0, r24
     4f2:	00 0c       	add	r0, r0
     4f4:	99 0b       	sbc	r25, r25
     4f6:	28 17       	cp	r18, r24
     4f8:	39 07       	cpc	r19, r25
     4fa:	2c f3       	brlt	.-54     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	}
}

static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     4fc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <numProjectiles>
     500:	18 16       	cp	r1, r24
     502:	84 f4       	brge	.+32     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     504:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_projectile(i, COLOUR_PROJECTILE);
     506:	6f e0       	ldi	r22, 0x0F	; 15
     508:	8c 2f       	mov	r24, r28
     50a:	0e 94 cb 01 	call	0x396	; 0x396 <redraw_projectile>
	}
}

static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     50e:	cf 5f       	subi	r28, 0xFF	; 255
     510:	2c 2f       	mov	r18, r28
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <numProjectiles>
     518:	08 2e       	mov	r0, r24
     51a:	00 0c       	add	r0, r0
     51c:	99 0b       	sbc	r25, r25
     51e:	28 17       	cp	r18, r24
     520:	39 07       	cpc	r19, r25
     522:	8c f3       	brlt	.-30     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
		asteroids[i] = GAME_POSITION(x,y);
		numAsteroids++;
	}
	
	redraw_whole_display();
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	bf 90       	pop	r11
     532:	af 90       	pop	r10
     534:	9f 90       	pop	r9
     536:	8f 90       	pop	r8
     538:	7f 90       	pop	r7
     53a:	6f 90       	pop	r6
     53c:	5f 90       	pop	r5
     53e:	4f 90       	pop	r4
     540:	08 95       	ret

00000542 <move_base>:
// The direction argument has the value MOVE_LEFT or
// MOVE_RIGHT. The move succeeds if the base isn't all 
// the way to one side, e.g., not permitted to move
// left if basePosition is already 0.
// Returns 1 if move successful, 0 otherwise.
int8_t move_base(int8_t direction) {	
     542:	cf 93       	push	r28
     544:	c8 2f       	mov	r28, r24
	// same value.
	
	// YOUR CODE HERE (AND BELOW) - FIX THIS FUNCTION
	
	// We erase the base from its current position first
	redraw_base(COLOUR_BLACK);
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 90 01 	call	0x320	; 0x320 <redraw_base>
	
	// Author: Stephen
	// Move the base to left and right
	if (direction == MOVE_LEFT) {
     54c:	c1 11       	cpse	r28, r1
     54e:	08 c0       	rjmp	.+16     	; 0x560 <move_base+0x1e>
		if (basePosition >= BASE_MOVE_LIMIT_LEFT) {
     550:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <basePosition>
     554:	18 16       	cp	r1, r24
     556:	6c f4       	brge	.+26     	; 0x572 <move_base+0x30>
			basePosition--;
     558:	81 50       	subi	r24, 0x01	; 1
     55a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <basePosition>
     55e:	09 c0       	rjmp	.+18     	; 0x572 <move_base+0x30>
		}
	} else if (direction == MOVE_RIGHT) {
     560:	c1 30       	cpi	r28, 0x01	; 1
     562:	39 f4       	brne	.+14     	; 0x572 <move_base+0x30>
		if (basePosition <= BASE_MOVE_LIMIT_RIGHT) {
     564:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <basePosition>
     568:	87 30       	cpi	r24, 0x07	; 7
     56a:	1c f4       	brge	.+6      	; 0x572 <move_base+0x30>
			basePosition++;
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <basePosition>
		}
	}
	
	// Redraw the base
	redraw_base(COLOUR_BASE);
     572:	8f ed       	ldi	r24, 0xDF	; 223
     574:	0e 94 90 01 	call	0x320	; 0x320 <redraw_base>
	
	return 1;
}
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <fire_projectile>:
// there. We are also limited in the number of projectiles
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
	uint8_t newProjectileNumber;
	if(numProjectiles < MAX_PROJECTILES && 
     57e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <numProjectiles>
     582:	84 30       	cpi	r24, 0x04	; 4
     584:	c4 f5       	brge	.+112    	; 0x5f6 <fire_projectile+0x78>
			projectile_at(basePosition, 2) == -1) {
     586:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <basePosition>
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     58a:	90 e1       	ldi	r25, 0x10	; 16
     58c:	59 9f       	mul	r21, r25
     58e:	90 01       	movw	r18, r0
     590:	11 24       	eor	r1, r1
     592:	42 2f       	mov	r20, r18
     594:	42 60       	ori	r20, 0x02	; 2
	for(i=0; i < numProjectiles; i++) {
     596:	68 2f       	mov	r22, r24
     598:	08 2e       	mov	r0, r24
     59a:	00 0c       	add	r0, r0
     59c:	77 0b       	sbc	r23, r23
     59e:	16 16       	cp	r1, r22
     5a0:	17 06       	cpc	r1, r23
     5a2:	b4 f4       	brge	.+44     	; 0x5d0 <fire_projectile+0x52>
		if(projectiles[i] == positionToCheck) {
     5a4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <projectiles>
     5a8:	94 17       	cp	r25, r20
     5aa:	39 f1       	breq	.+78     	; 0x5fa <fire_projectile+0x7c>
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <fire_projectile+0x46>
     5b0:	f9 01       	movw	r30, r18
     5b2:	e7 5c       	subi	r30, 0xC7	; 199
     5b4:	fe 4f       	sbci	r31, 0xFE	; 254
     5b6:	20 81       	ld	r18, Z
     5b8:	42 13       	cpse	r20, r18
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <fire_projectile+0x46>
// there. We are also limited in the number of projectiles
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
	uint8_t newProjectileNumber;
	if(numProjectiles < MAX_PROJECTILES && 
     5bc:	9f 3f       	cpi	r25, 0xFF	; 255
     5be:	41 f0       	breq	.+16     	; 0x5d0 <fire_projectile+0x52>
		newProjectileNumber = numProjectiles++;
		projectiles[newProjectileNumber] = GAME_POSITION(basePosition, 2);
		redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		return 1;
	} else {
		return 0;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	08 95       	ret
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     5c4:	9f 5f       	subi	r25, 0xFF	; 255
     5c6:	29 2f       	mov	r18, r25
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	26 17       	cp	r18, r22
     5cc:	37 07       	cpc	r19, r23
     5ce:	84 f3       	brlt	.-32     	; 0x5b0 <fire_projectile+0x32>
	uint8_t newProjectileNumber;
	if(numProjectiles < MAX_PROJECTILES && 
			projectile_at(basePosition, 2) == -1) {
		// Have space to add projectile - add it at the x position of
		// the base, in row 2(y=2)
		newProjectileNumber = numProjectiles++;
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	98 0f       	add	r25, r24
     5d4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <numProjectiles>
		projectiles[newProjectileNumber] = GAME_POSITION(basePosition, 2);
     5d8:	e8 2f       	mov	r30, r24
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	e7 5c       	subi	r30, 0xC7	; 199
     5de:	fe 4f       	sbci	r31, 0xFE	; 254
     5e0:	90 e1       	ldi	r25, 0x10	; 16
     5e2:	59 02       	muls	r21, r25
     5e4:	90 01       	movw	r18, r0
     5e6:	11 24       	eor	r1, r1
     5e8:	22 60       	ori	r18, 0x02	; 2
     5ea:	20 83       	st	Z, r18
		redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
     5ec:	6f e0       	ldi	r22, 0x0F	; 15
     5ee:	0e 94 cb 01 	call	0x396	; 0x396 <redraw_projectile>
		return 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	08 95       	ret
	} else {
		return 0;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	08 95       	ret
     5fa:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     5fc:	08 95       	ret

000005fe <advance_projectiles>:

// Move projectiles up by one position, and remove those that 
// have gone off the top or that hit an asteroid.
void advance_projectiles(void) {
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
	uint8_t x, y;
	int8_t projectileNumber;

	projectileNumber = 0;
     608:	d0 e0       	ldi	r29, 0x00	; 0
	while(projectileNumber < numProjectiles) {
     60a:	41 c0       	rjmp	.+130    	; 0x68e <advance_projectiles+0x90>
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     60c:	0d 2f       	mov	r16, r29
     60e:	0d 2e       	mov	r0, r29
     610:	00 0c       	add	r0, r0
     612:	11 0b       	sbc	r17, r17
     614:	f8 01       	movw	r30, r16
     616:	e7 5c       	subi	r30, 0xC7	; 199
     618:	fe 4f       	sbci	r31, 0xFE	; 254
     61a:	f0 80       	ld	r15, Z
		y = GET_Y_POSITION(projectiles[projectileNumber]);
     61c:	cf 2d       	mov	r28, r15
     61e:	cf 70       	andi	r28, 0x0F	; 15
		
		// Work out the new position (but don't update the projectile 
		// location yet - we only do that if we know the move is valid)
		y = y+1;
     620:	cf 5f       	subi	r28, 0xFF	; 255
		
		// Check if new position would be off the top of the display
		if(y == FIELD_HEIGHT) {
     622:	c0 31       	cpi	r28, 0x10	; 16
     624:	19 f5       	brne	.+70     	; 0x66c <advance_projectiles+0x6e>
}

// Remove projectile with the given projectile number (from 0 to
// numProjectiles - 1).
static void remove_projectile(int8_t projectileNumber) {	
	if(projectileNumber < 0 || projectileNumber >= numProjectiles) {
     626:	dd 23       	and	r29, r29
     628:	94 f1       	brlt	.+100    	; 0x68e <advance_projectiles+0x90>
		// Invalid index - do nothing 
		return;
	}
	
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	8d 2f       	mov	r24, r29
     62e:	0e 94 cb 01 	call	0x396	; 0x396 <redraw_projectile>
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	2d 0f       	add	r18, r29
     636:	82 2f       	mov	r24, r18
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <numProjectiles>
     63e:	46 2f       	mov	r20, r22
     640:	06 2e       	mov	r0, r22
     642:	00 0c       	add	r0, r0
     644:	55 0b       	sbc	r21, r21
     646:	84 17       	cp	r24, r20
     648:	95 07       	cpc	r25, r21
     64a:	64 f4       	brge	.+24     	; 0x664 <advance_projectiles+0x66>
		projectiles[i-1] = projectiles[i];
     64c:	fc 01       	movw	r30, r24
     64e:	e7 5c       	subi	r30, 0xC7	; 199
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	30 81       	ld	r19, Z
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	30 83       	st	Z, r19
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     658:	2f 5f       	subi	r18, 0xFF	; 255
     65a:	82 2f       	mov	r24, r18
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	84 17       	cp	r24, r20
     660:	95 07       	cpc	r25, r21
     662:	a4 f3       	brlt	.-24     	; 0x64c <advance_projectiles+0x4e>
		projectiles[i-1] = projectiles[i];
	}
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
     664:	61 50       	subi	r22, 0x01	; 1
     666:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <numProjectiles>
     66a:	11 c0       	rjmp	.+34     	; 0x68e <advance_projectiles+0x90>
			// AND THE ASTEROID.
			
			// OTHERWISE...
			
			// Remove the projectile from the display 
			redraw_projectile(projectileNumber, COLOUR_BLACK);
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	8d 2f       	mov	r24, r29
     670:	0e 94 cb 01 	call	0x396	; 0x396 <redraw_projectile>
			
			// Update the projectile's position
			projectiles[projectileNumber] = GAME_POSITION(x,y);
     674:	f8 01       	movw	r30, r16
     676:	e7 5c       	subi	r30, 0xC7	; 199
     678:	fe 4f       	sbci	r31, 0xFE	; 254
     67a:	8f 2d       	mov	r24, r15
     67c:	80 7f       	andi	r24, 0xF0	; 240
     67e:	cf 70       	andi	r28, 0x0F	; 15
     680:	c8 2b       	or	r28, r24
     682:	c0 83       	st	Z, r28
			
			// Redraw the projectile
			redraw_projectile(projectileNumber, COLOUR_PROJECTILE);
     684:	6f e0       	ldi	r22, 0x0F	; 15
     686:	8d 2f       	mov	r24, r29
     688:	0e 94 cb 01 	call	0x396	; 0x396 <redraw_projectile>
			
			// Move on to the next projectile (we don't do this if a projectile
			// is removed since projectiles will be shuffled in the list and the
			// next projectile (if any) will take on the same projectile number)
			projectileNumber++;
     68c:	df 5f       	subi	r29, 0xFF	; 255
void advance_projectiles(void) {
	uint8_t x, y;
	int8_t projectileNumber;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
     68e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <numProjectiles>
     692:	d8 17       	cp	r29, r24
     694:	0c f4       	brge	.+2      	; 0x698 <advance_projectiles+0x9a>
     696:	ba cf       	rjmp	.-140    	; 0x60c <advance_projectiles+0xe>
			// is removed since projectiles will be shuffled in the list and the
			// next projectile (if any) will take on the same projectile number)
			projectileNumber++;
		}			
	}
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	08 95       	ret

000006a4 <is_game_over>:

// Returns 1 if the game is over, 0 otherwise. Initially, the game is
// never over.
int8_t is_game_over(void) {
	return 0;
}
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret

000006a8 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     6a8:	80 e8       	ldi	r24, 0x80	; 128
     6aa:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <spi_setup_master>
     6ae:	08 95       	ret

000006b0 <ledmatrix_update_pixel>:
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	80 31       	cpi	r24, 0x10	; 16
     6b8:	b0 f4       	brcc	.+44     	; 0x6e6 <ledmatrix_update_pixel+0x36>
     6ba:	68 30       	cpi	r22, 0x08	; 8
     6bc:	a0 f4       	brcc	.+40     	; 0x6e6 <ledmatrix_update_pixel+0x36>
     6be:	14 2f       	mov	r17, r20
     6c0:	c6 2f       	mov	r28, r22
     6c2:	d8 2f       	mov	r29, r24
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     6ca:	6c 2f       	mov	r22, r28
     6cc:	67 70       	andi	r22, 0x07	; 7
     6ce:	80 e1       	ldi	r24, 0x10	; 16
     6d0:	68 9f       	mul	r22, r24
     6d2:	90 01       	movw	r18, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	8d 2f       	mov	r24, r29
     6d8:	8f 70       	andi	r24, 0x0F	; 15
     6da:	82 2b       	or	r24, r18
     6dc:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     6e0:	81 2f       	mov	r24, r17
     6e2:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	08 95       	ret

000006ee <ledmatrix_update_column>:
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	80 31       	cpi	r24, 0x10	; 16
     6f8:	90 f4       	brcc	.+36     	; 0x71e <ledmatrix_update_column+0x30>
     6fa:	8b 01       	movw	r16, r22
     6fc:	c8 2f       	mov	r28, r24
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     704:	8c 2f       	mov	r24, r28
     706:	8f 70       	andi	r24, 0x0F	; 15
     708:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     70c:	e8 01       	movw	r28, r16
     70e:	08 5f       	subi	r16, 0xF8	; 248
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	89 91       	ld	r24, Y+
     714:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     718:	c0 17       	cp	r28, r16
     71a:	d1 07       	cpc	r29, r17
     71c:	d1 f7       	brne	.-12     	; 0x712 <ledmatrix_update_column+0x24>
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret

00000728 <ledmatrix_shift_display_left>:
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     734:	08 95       	ret

00000736 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     736:	8f e0       	ldi	r24, 0x0F	; 15
     738:	0e 94 0c 07 	call	0xe18	; 0xe18 <spi_send_byte>
     73c:	08 95       	ret

0000073e <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     73e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ledmatrix_setup>
	init_button_interrupts();
     742:	0e 94 07 01 	call	0x20e	; 0x20e <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	7b e4       	ldi	r23, 0x4B	; 75
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <init_serial_stdio>
	
	init_timer0();
     754:	0e 94 2c 07 	call	0xe58	; 0xe58 <init_timer0>
	
	// Turn on global interrupts
	sei();
     758:	78 94       	sei
     75a:	08 95       	ret

0000075c <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     75c:	0e 94 23 07 	call	0xe46	; 0xe46 <clear_terminal>
	move_cursor(10,10);
     760:	6a e0       	ldi	r22, 0x0A	; 10
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	8a e0       	ldi	r24, 0x0A	; 10
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 12 07 	call	0xe24	; 0xe24 <move_cursor>
	printf_P(PSTR("Asteroids"));
     76c:	89 ed       	ldi	r24, 0xD9	; 217
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	0e 94 98 08 	call	0x1130	; 0x1130 <printf_P>
	move_cursor(10,12);
     778:	6c e0       	ldi	r22, 0x0C	; 12
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	8a e0       	ldi	r24, 0x0A	; 10
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 12 07 	call	0xe24	; 0xe24 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Stephen Goodhill - 44852593"));
     784:	84 ea       	ldi	r24, 0xA4	; 164
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	9f 93       	push	r25
     78a:	8f 93       	push	r24
     78c:	0e 94 98 08 	call	0x1130	; 0x1130 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     790:	0e 94 9b 03 	call	0x736	; 0x736 <ledmatrix_clear>
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("ASTEROIDS 44852593", COLOUR_GREEN);
     79c:	60 ef       	ldi	r22, 0xF0	; 240
     79e:	83 e1       	ldi	r24, 0x13	; 19
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 c5 04 	call	0x98a	; 0x98a <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     7a6:	0d c0       	rjmp	.+26     	; 0x7c2 <splash_screen+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a8:	2f e7       	ldi	r18, 0x7F	; 127
     7aa:	89 ea       	ldi	r24, 0xA9	; 169
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	21 50       	subi	r18, 0x01	; 1
     7b0:	80 40       	sbci	r24, 0x00	; 0
     7b2:	90 40       	sbci	r25, 0x00	; 0
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <splash_screen+0x52>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <splash_screen+0x5c>
     7b8:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     7ba:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
     7be:	8f 3f       	cpi	r24, 0xFF	; 255
     7c0:	29 f4       	brne	.+10     	; 0x7cc <splash_screen+0x70>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("ASTEROIDS 44852593", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     7c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <scroll_display>
     7c6:	81 11       	cpse	r24, r1
     7c8:	ef cf       	rjmp	.-34     	; 0x7a8 <splash_screen+0x4c>
     7ca:	e8 cf       	rjmp	.-48     	; 0x79c <splash_screen+0x40>
     7cc:	08 95       	ret

000007ce <new_game>:
	}
}

void new_game(void) {
	// Initialise the game and display
	initialise_game();
     7ce:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <initialise_game>
	
	// Clear the serial terminal
	clear_terminal();
     7d2:	0e 94 23 07 	call	0xe46	; 0xe46 <clear_terminal>
	
	// Initialise the score
	init_score();
     7d6:	0e 94 bc 04 	call	0x978	; 0x978 <init_score>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     7da:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
	clear_serial_input_buffer();
     7de:	0e 94 4a 06 	call	0xc94	; 0xc94 <clear_serial_input_buffer>
     7e2:	08 95       	ret

000007e4 <play_game>:
}

void play_game(void) {
     7e4:	6f 92       	push	r6
     7e6:	7f 92       	push	r7
     7e8:	8f 92       	push	r8
     7ea:	9f 92       	push	r9
     7ec:	af 92       	push	r10
     7ee:	bf 92       	push	r11
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
     800:	0e 94 44 07 	call	0xe88	; 0xe88 <get_current_time>
     804:	4b 01       	movw	r8, r22
     806:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t current_time, last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     808:	d0 e0       	ldi	r29, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     80a:	77 24       	eor	r7, r7
     80c:	7a 94       	dec	r7
		
		if(button == NO_BUTTON_PUSHED) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     80e:	0b e6       	ldi	r16, 0x6B	; 107
     810:	12 e0       	ldi	r17, 0x02	; 2
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     812:	68 94       	set
     814:	66 24       	eor	r6, r6
     816:	61 f8       	bld	r6, 1
    // were moved.
	current_time = get_current_time();
	last_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
     818:	5f c0       	rjmp	.+190    	; 0x8d8 <play_game+0xf4>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     81a:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
     81e:	c8 2f       	mov	r28, r24
		
		if(button == NO_BUTTON_PUSHED) {
     820:	8f 3f       	cpi	r24, 0xFF	; 255
     822:	09 f0       	breq	.+2      	; 0x826 <play_game+0x42>
     824:	63 c0       	rjmp	.+198    	; 0x8ec <play_game+0x108>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     826:	0e 94 43 06 	call	0xc86	; 0xc86 <serial_input_available>
     82a:	88 23       	and	r24, r24
     82c:	f1 f1       	breq	.+124    	; 0x8aa <play_game+0xc6>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     82e:	f8 01       	movw	r30, r16
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     838:	d1 11       	cpse	r29, r1
     83a:	05 c0       	rjmp	.+10     	; 0x846 <play_game+0x62>
     83c:	8b 31       	cpi	r24, 0x1B	; 27
     83e:	09 f4       	brne	.+2      	; 0x842 <play_game+0x5e>
     840:	51 c0       	rjmp	.+162    	; 0x8e4 <play_game+0x100>
     842:	97 2d       	mov	r25, r7
     844:	0b c0       	rjmp	.+22     	; 0x85c <play_game+0x78>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     846:	d1 30       	cpi	r29, 0x01	; 1
     848:	29 f4       	brne	.+10     	; 0x854 <play_game+0x70>
     84a:	8b 35       	cpi	r24, 0x5B	; 91
     84c:	09 f4       	brne	.+2      	; 0x850 <play_game+0x6c>
     84e:	4c c0       	rjmp	.+152    	; 0x8e8 <play_game+0x104>
     850:	97 2d       	mov	r25, r7
     852:	04 c0       	rjmp	.+8      	; 0x85c <play_game+0x78>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     854:	d2 30       	cpi	r29, 0x02	; 2
     856:	29 f4       	brne	.+10     	; 0x862 <play_game+0x7e>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     858:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
     85a:	87 2d       	mov	r24, r7
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     85c:	94 34       	cpi	r25, 0x44	; 68
     85e:	11 f4       	brne	.+4      	; 0x864 <play_game+0x80>
     860:	08 c0       	rjmp	.+16     	; 0x872 <play_game+0x8e>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     862:	97 2d       	mov	r25, r7
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     864:	28 2f       	mov	r18, r24
     866:	2f 7d       	andi	r18, 0xDF	; 223
     868:	2c 34       	cpi	r18, 0x4C	; 76
     86a:	09 f0       	breq	.+2      	; 0x86e <play_game+0x8a>
     86c:	42 c0       	rjmp	.+132    	; 0x8f2 <play_game+0x10e>
     86e:	d0 e0       	ldi	r29, 0x00	; 0
     870:	01 c0       	rjmp	.+2      	; 0x874 <play_game+0x90>
     872:	d0 e0       	ldi	r29, 0x00	; 0
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e 94 a1 02 	call	0x542	; 0x542 <move_base>
     87a:	17 c0       	rjmp	.+46     	; 0x8aa <play_game+0xc6>
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
     87c:	80 32       	cpi	r24, 0x20	; 32
     87e:	31 f4       	brne	.+12     	; 0x88c <play_game+0xa8>
     880:	d0 e0       	ldi	r29, 0x00	; 0
     882:	01 c0       	rjmp	.+2      	; 0x886 <play_game+0xa2>
     884:	d0 e0       	ldi	r29, 0x00	; 0
			// Button 2 pressed or up cursor key escape sequence completed OR
			// space bar pressed - attempt to fire projectile
			fire_projectile();
     886:	0e 94 bf 02 	call	0x57e	; 0x57e <fire_projectile>
     88a:	0f c0       	rjmp	.+30     	; 0x8aa <play_game+0xc6>
     88c:	d0 e0       	ldi	r29, 0x00	; 0
		} else if(button==1 || escape_sequence_char=='B') {
     88e:	c1 30       	cpi	r28, 0x01	; 1
     890:	61 f0       	breq	.+24     	; 0x8aa <play_game+0xc6>
     892:	92 34       	cpi	r25, 0x42	; 66
     894:	51 f0       	breq	.+20     	; 0x8aa <play_game+0xc6>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Ignore at present
		} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
     896:	cc 23       	and	r28, r28
     898:	29 f0       	breq	.+10     	; 0x8a4 <play_game+0xc0>
     89a:	93 34       	cpi	r25, 0x43	; 67
     89c:	19 f0       	breq	.+6      	; 0x8a4 <play_game+0xc0>
     89e:	8f 7d       	andi	r24, 0xDF	; 223
     8a0:	82 35       	cpi	r24, 0x52	; 82
     8a2:	19 f4       	brne	.+6      	; 0x8aa <play_game+0xc6>
			// Button 0 pressed OR right cursor key escape sequence completed OR
			// letter R (lowercase or uppercase) pressed - attempt to move right
			move_base(MOVE_RIGHT);
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 a1 02 	call	0x542	; 0x542 <move_base>
			// pressed again
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
     8aa:	0e 94 44 07 	call	0xe88	; 0xe88 <get_current_time>
     8ae:	6b 01       	movw	r12, r22
     8b0:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= last_move_time + 500) {
     8b2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <is_game_over>
     8b6:	81 11       	cpse	r24, r1
     8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <play_game+0xf4>
     8ba:	d5 01       	movw	r26, r10
     8bc:	c4 01       	movw	r24, r8
     8be:	8c 50       	subi	r24, 0x0C	; 12
     8c0:	9e 4f       	sbci	r25, 0xFE	; 254
     8c2:	af 4f       	sbci	r26, 0xFF	; 255
     8c4:	bf 4f       	sbci	r27, 0xFF	; 255
     8c6:	c8 16       	cp	r12, r24
     8c8:	d9 06       	cpc	r13, r25
     8ca:	ea 06       	cpc	r14, r26
     8cc:	fb 06       	cpc	r15, r27
     8ce:	20 f0       	brcs	.+8      	; 0x8d8 <play_game+0xf4>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we 
			// moved them
			advance_projectiles();
     8d0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <advance_projectiles>
			
			last_move_time = current_time;
     8d4:	46 01       	movw	r8, r12
     8d6:	57 01       	movw	r10, r14
    // were moved.
	current_time = get_current_time();
	last_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
     8d8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <is_game_over>
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <play_game+0xfe>
     8e0:	9c cf       	rjmp	.-200    	; 0x81a <play_game+0x36>
     8e2:	0f c0       	rjmp	.+30     	; 0x902 <__stack+0x3>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     8e4:	d1 e0       	ldi	r29, 0x01	; 1
     8e6:	e1 cf       	rjmp	.-62     	; 0x8aa <play_game+0xc6>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     8e8:	d6 2d       	mov	r29, r6
     8ea:	df cf       	rjmp	.-66     	; 0x8aa <play_game+0xc6>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	11 f2       	breq	.-124    	; 0x874 <play_game+0x90>
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <play_game+0x114>
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
     8f2:	91 34       	cpi	r25, 0x41	; 65
     8f4:	19 f6       	brne	.-122    	; 0x87c <play_game+0x98>
     8f6:	c6 cf       	rjmp	.-116    	; 0x884 <play_game+0xa0>
     8f8:	82 30       	cpi	r24, 0x02	; 2
     8fa:	29 f2       	breq	.-118    	; 0x886 <play_game+0xa2>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     8fc:	97 2d       	mov	r25, r7
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     8fe:	87 2d       	mov	r24, r7
     900:	c6 cf       	rjmp	.-116    	; 0x88e <play_game+0xaa>
			
			last_move_time = current_time;
		}
	}
	// We get here if the game is over.
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	7f 90       	pop	r7
     91c:	6f 90       	pop	r6
     91e:	08 95       	ret

00000920 <handle_game_over>:

void handle_game_over() {
	move_cursor(10,14);
     920:	6e e0       	ldi	r22, 0x0E	; 14
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	8a e0       	ldi	r24, 0x0A	; 10
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 12 07 	call	0xe24	; 0xe24 <move_cursor>
	printf_P(PSTR("GAME OVER"));
     92c:	8a e9       	ldi	r24, 0x9A	; 154
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 98 08 	call	0x1130	; 0x1130 <printf_P>
	move_cursor(10,15);
     938:	6f e0       	ldi	r22, 0x0F	; 15
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	8a e0       	ldi	r24, 0x0A	; 10
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 12 07 	call	0xe24	; 0xe24 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     944:	8c e7       	ldi	r24, 0x7C	; 124
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	0e 94 98 08 	call	0x1130	; 0x1130 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0e 94 15 01 	call	0x22a	; 0x22a <button_pushed>
     95c:	8f 3f       	cpi	r24, 0xFF	; 255
     95e:	e1 f3       	breq	.-8      	; 0x958 <handle_game_over+0x38>
		; // wait
	}
	
}
     960:	08 95       	ret

00000962 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     962:	0e 94 9f 03 	call	0x73e	; 0x73e <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     966:	0e 94 ae 03 	call	0x75c	; 0x75c <splash_screen>
	
	while(1) {
		new_game();
     96a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <new_game>
		play_game();
     96e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <play_game>
		handle_game_over();
     972:	0e 94 90 04 	call	0x920	; 0x920 <handle_game_over>
     976:	f9 cf       	rjmp	.-14     	; 0x96a <main+0x8>

00000978 <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
     978:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <score>
     97c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <score+0x1>
     980:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <score+0x2>
     984:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <score+0x3>
     988:	08 95       	ret

0000098a <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     98a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
     98e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <display_string+0x1>
     992:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <display_string>
	next_col_ptr = 0;
     996:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <next_col_ptr+0x1>
     99a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <next_col_ptr>
	next_char_to_display = 0;
     99e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <next_char_to_display+0x1>
     9a2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <next_char_to_display>
     9a6:	08 95       	ret

000009a8 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	28 97       	sbiw	r28, 0x08	; 8
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     9c0:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <next_col_ptr>
     9c4:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <next_col_ptr+0x1>
     9c8:	30 97       	sbiw	r30, 0x00	; 0
     9ca:	81 f0       	breq	.+32     	; 0x9ec <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     9cc:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     9ce:	10 ff       	sbrs	r17, 0
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     9d2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <next_col_ptr+0x1>
     9d6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9da:	00 e0       	ldi	r16, 0x00	; 0
     9dc:	6b c0       	rjmp	.+214    	; 0xab4 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     9de:	31 96       	adiw	r30, 0x01	; 1
     9e0:	f0 93 32 01 	sts	0x0132, r31	; 0x800132 <next_col_ptr+0x1>
     9e4:	e0 93 31 01 	sts	0x0131, r30	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9e8:	00 e0       	ldi	r16, 0x00	; 0
     9ea:	64 c0       	rjmp	.+200    	; 0xab4 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     9ec:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <next_char_to_display>
     9f0:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <next_char_to_display+0x1>
     9f4:	30 97       	sbiw	r30, 0x00	; 0
     9f6:	09 f4       	brne	.+2      	; 0x9fa <scroll_display+0x52>
     9f8:	49 c0       	rjmp	.+146    	; 0xa8c <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     9fa:	cf 01       	movw	r24, r30
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <next_char_to_display+0x1>
     a02:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <next_char_to_display>
     a06:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     a08:	e1 11       	cpse	r30, r1
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     a0c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <next_char_to_display+0x1>
     a10:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <next_char_to_display>
			shift_countdown = 16;
     a14:	80 e1       	ldi	r24, 0x10	; 16
     a16:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a1a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     a1c:	10 e0       	ldi	r17, 0x00	; 0
     a1e:	4a c0       	rjmp	.+148    	; 0xab4 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     a20:	8f e9       	ldi	r24, 0x9F	; 159
     a22:	8e 0f       	add	r24, r30
     a24:	8a 31       	cpi	r24, 0x1A	; 26
     a26:	70 f4       	brcc	.+28     	; 0xa44 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	eb 5c       	subi	r30, 0xCB	; 203
     a30:	ff 4f       	sbci	r31, 0xFF	; 255
     a32:	85 91       	lpm	r24, Z+
     a34:	94 91       	lpm	r25, Z
     a36:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <next_col_ptr+0x1>
     a3a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a3e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	38 c0       	rjmp	.+112    	; 0xab4 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     a44:	8f eb       	ldi	r24, 0xBF	; 191
     a46:	8e 0f       	add	r24, r30
     a48:	8a 31       	cpi	r24, 0x1A	; 26
     a4a:	70 f4       	brcc	.+28     	; 0xa68 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	eb 58       	subi	r30, 0x8B	; 139
     a54:	ff 4f       	sbci	r31, 0xFF	; 255
     a56:	85 91       	lpm	r24, Z+
     a58:	94 91       	lpm	r25, Z
     a5a:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <next_col_ptr+0x1>
     a5e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a62:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	26 c0       	rjmp	.+76     	; 0xab4 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     a68:	80 ed       	ldi	r24, 0xD0	; 208
     a6a:	8e 0f       	add	r24, r30
     a6c:	8a 30       	cpi	r24, 0x0A	; 10
     a6e:	00 f5       	brcc	.+64     	; 0xab0 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	ed 57       	subi	r30, 0x7D	; 125
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	85 91       	lpm	r24, Z+
     a7c:	94 91       	lpm	r25, Z
     a7e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <next_col_ptr+0x1>
     a82:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a86:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     a88:	10 e0       	ldi	r17, 0x00	; 0
     a8a:	14 c0       	rjmp	.+40     	; 0xab4 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     a8c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <display_string>
     a90:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     a94:	01 e0       	ldi	r16, 0x01	; 1
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	09 f0       	breq	.+2      	; 0xa9c <scroll_display+0xf4>
     a9a:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     a9c:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <next_char_to_display+0x1>
     aa0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <next_char_to_display>
		display_string = 0;
     aa4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <display_string+0x1>
     aa8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     aac:	10 e0       	ldi	r17, 0x00	; 0
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     ab0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     ab2:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     ab4:	0e 94 94 03 	call	0x728	; 0x728 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     ab8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
     abc:	fe 01       	movw	r30, r28
     abe:	38 96       	adiw	r30, 0x08	; 8
     ac0:	ce 01       	movw	r24, r28
     ac2:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     ac4:	11 23       	and	r17, r17
     ac6:	14 f4       	brge	.+4      	; 0xacc <scroll_display+0x124>
			column_colour_data[i] = colour;
     ac8:	20 83       	st	Z, r18
     aca:	01 c0       	rjmp	.+2      	; 0xace <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
     acc:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     ace:	11 0f       	add	r17, r17
     ad0:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     ad2:	e8 17       	cp	r30, r24
     ad4:	f9 07       	cpc	r31, r25
     ad6:	b1 f7       	brne	.-20     	; 0xac4 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     ad8:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     ada:	be 01       	movw	r22, r28
     adc:	6f 5f       	subi	r22, 0xFF	; 255
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	8f e0       	ldi	r24, 0x0F	; 15
     ae2:	0e 94 77 03 	call	0x6ee	; 0x6ee <ledmatrix_update_column>
	if(shift_countdown > 0) {
     ae6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <shift_countdown.1854>
     aea:	88 23       	and	r24, r24
     aec:	89 f0       	breq	.+34     	; 0xb10 <scroll_display+0x168>
		shift_countdown--;
     aee:	81 50       	subi	r24, 0x01	; 1
     af0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
     af4:	00 23       	and	r16, r16
     af6:	11 f0       	breq	.+4      	; 0xafc <scroll_display+0x154>
     af8:	88 23       	and	r24, r24
     afa:	11 f0       	breq	.+4      	; 0xb00 <scroll_display+0x158>
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	03 c0       	rjmp	.+6      	; 0xb06 <scroll_display+0x15e>
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <scroll_display+0x15e>
     b04:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	99 23       	and	r25, r25
     b0a:	29 f0       	breq	.+10     	; 0xb16 <scroll_display+0x16e>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     b10:	00 23       	and	r16, r16
     b12:	a1 f3       	breq	.-24     	; 0xafc <scroll_display+0x154>
     b14:	f7 cf       	rjmp	.-18     	; 0xb04 <scroll_display+0x15c>
	return !finished;
}
     b16:	28 96       	adiw	r28, 0x08	; 8
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	08 95       	ret

00000b2c <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     b2c:	cf 93       	push	r28
     b2e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     b30:	8a 30       	cpi	r24, 0x0A	; 10
     b32:	19 f4       	brne	.+6      	; 0xb3a <uart_put_char+0xe>
		uart_put_char('\r', stream);
     b34:	8d e0       	ldi	r24, 0x0D	; 13
     b36:	0e 94 96 05 	call	0xb2c	; 0xb2c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     b3a:	9f b7       	in	r25, 0x3f	; 63
     b3c:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     b40:	99 23       	and	r25, r25
     b42:	29 f1       	breq	.+74     	; 0xb8e <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     b44:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bytes_in_out_buffer>
     b48:	8f 3f       	cpi	r24, 0xFF	; 255
     b4a:	d1 f3       	breq	.-12     	; 0xb40 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     b4c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     b4e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <out_insert_pos>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	8e 0f       	add	r24, r30
     b56:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <out_insert_pos>
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	e7 5a       	subi	r30, 0xA7	; 167
     b5e:	fe 4f       	sbci	r31, 0xFE	; 254
     b60:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     b62:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bytes_in_out_buffer>
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     b6c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <out_insert_pos>
     b70:	8f 3f       	cpi	r24, 0xFF	; 255
     b72:	11 f4       	brne	.+4      	; 0xb78 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     b74:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     b78:	e1 ec       	ldi	r30, 0xC1	; 193
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 62       	ori	r24, 0x20	; 32
     b80:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     b82:	99 23       	and	r25, r25
     b84:	39 f0       	breq	.+14     	; 0xb94 <uart_put_char+0x68>
		sei();
     b86:	78 94       	sei
	}
	return 0;
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
}
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     b9c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <bytes_in_input_buffer>
     ba0:	88 23       	and	r24, r24
     ba2:	e1 f3       	breq	.-8      	; 0xb9c <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     ba4:	2f b7       	in	r18, 0x3f	; 63
     ba6:	20 78       	andi	r18, 0x80	; 128
	cli();
     ba8:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     baa:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <input_insert_pos>
     bae:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <bytes_in_input_buffer>
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	83 1b       	sub	r24, r19
     bb6:	91 09       	sbc	r25, r1
     bb8:	5a f4       	brpl	.+22     	; 0xbd0 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     bba:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <input_insert_pos>
     bbe:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e8 1b       	sub	r30, r24
     bc6:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     bc8:	e7 59       	subi	r30, 0x97	; 151
     bca:	fd 4f       	sbci	r31, 0xFD	; 253
     bcc:	80 81       	ld	r24, Z
     bce:	0a c0       	rjmp	.+20     	; 0xbe4 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     bd0:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <input_insert_pos>
     bd4:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <bytes_in_input_buffer>
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	e8 1b       	sub	r30, r24
     bdc:	f1 09       	sbc	r31, r1
     bde:	e7 5a       	subi	r30, 0xA7	; 167
     be0:	fd 4f       	sbci	r31, 0xFD	; 253
     be2:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     be4:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <bytes_in_input_buffer>
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <bytes_in_input_buffer>
	if(interrupts_enabled) {
     bee:	22 23       	and	r18, r18
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <uart_get_char+0x58>
		sei();
     bf2:	78 94       	sei
	}	
	return c;
}
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	08 95       	ret

00000bf8 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     bf8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <out_insert_pos>
	bytes_in_out_buffer = 0;
     bfc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <bytes_in_out_buffer>
	input_insert_pos = 0;
     c00:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <input_insert_pos>
	bytes_in_input_buffer = 0;
     c04:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <bytes_in_input_buffer>
	input_overrun = 0;
     c08:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     c0c:	40 93 33 01 	sts	0x0133, r20	; 0x800133 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	aa 1f       	adc	r26, r26
     c1a:	bb 1f       	adc	r27, r27
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	aa 1f       	adc	r26, r26
     c22:	bb 1f       	adc	r27, r27
     c24:	9c 01       	movw	r18, r24
     c26:	ad 01       	movw	r20, r26
     c28:	22 0f       	add	r18, r18
     c2a:	33 1f       	adc	r19, r19
     c2c:	44 1f       	adc	r20, r20
     c2e:	55 1f       	adc	r21, r21
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	72 e1       	ldi	r23, 0x12	; 18
     c34:	8a e7       	ldi	r24, 0x7A	; 122
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 77 07 	call	0xeee	; 0xeee <__divmodsi4>
     c3c:	ba 01       	movw	r22, r20
     c3e:	a9 01       	movw	r20, r18
     c40:	4f 5f       	subi	r20, 0xFF	; 255
     c42:	5f 4f       	sbci	r21, 0xFF	; 255
     c44:	6f 4f       	sbci	r22, 0xFF	; 255
     c46:	7f 4f       	sbci	r23, 0xFF	; 255
     c48:	db 01       	movw	r26, r22
     c4a:	ca 01       	movw	r24, r20
     c4c:	1a f4       	brpl	.+6      	; 0xc54 <init_serial_stdio+0x5c>
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	a1 1d       	adc	r26, r1
     c52:	b1 1d       	adc	r27, r1
     c54:	b5 95       	asr	r27
     c56:	a7 95       	ror	r26
     c58:	97 95       	ror	r25
     c5a:	87 95       	ror	r24
     c5c:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     c5e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c62:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     c66:	e1 ec       	ldi	r30, 0xC1	; 193
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	88 e1       	ldi	r24, 0x18	; 24
     c6c:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     c6e:	80 81       	ld	r24, Z
     c70:	80 68       	ori	r24, 0x80	; 128
     c72:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     c74:	eb e6       	ldi	r30, 0x6B	; 107
     c76:	f2 e0       	ldi	r31, 0x02	; 2
     c78:	85 e0       	ldi	r24, 0x05	; 5
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	93 83       	std	Z+3, r25	; 0x03
     c7e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     c80:	91 83       	std	Z+1, r25	; 0x01
     c82:	80 83       	st	Z, r24
     c84:	08 95       	ret

00000c86 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     c86:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <bytes_in_input_buffer>
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	91 11       	cpse	r25, r1
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <serial_input_available+0xc>
     c90:	80 e0       	ldi	r24, 0x00	; 0
}
     c92:	08 95       	ret

00000c94 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     c94:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <input_insert_pos>
	bytes_in_input_buffer = 0;
     c98:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <bytes_in_input_buffer>
     c9c:	08 95       	ret

00000c9e <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     cb2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bytes_in_out_buffer>
     cb6:	88 23       	and	r24, r24
     cb8:	29 f1       	breq	.+74     	; 0xd04 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     cba:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <out_insert_pos>
     cbe:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <bytes_in_out_buffer>
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	82 1b       	sub	r24, r18
     cc6:	91 09       	sbc	r25, r1
     cc8:	5a f4       	brpl	.+22     	; 0xce0 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     cca:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <out_insert_pos>
     cce:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	e8 1b       	sub	r30, r24
     cd6:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     cd8:	e8 5a       	subi	r30, 0xA8	; 168
     cda:	fd 4f       	sbci	r31, 0xFD	; 253
     cdc:	90 81       	ld	r25, Z
     cde:	0a c0       	rjmp	.+20     	; 0xcf4 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     ce0:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <out_insert_pos>
     ce4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bytes_in_out_buffer>
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	e8 1b       	sub	r30, r24
     cec:	f1 09       	sbc	r31, r1
     cee:	e7 5a       	subi	r30, 0xA7	; 167
     cf0:	fe 4f       	sbci	r31, 0xFE	; 254
     cf2:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     cf4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bytes_in_out_buffer>
     cf8:	81 50       	subi	r24, 0x01	; 1
     cfa:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     cfe:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     d02:	05 c0       	rjmp	.+10     	; 0xd0e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     d04:	e1 ec       	ldi	r30, 0xC1	; 193
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	80 83       	st	Z, r24
	}
}
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	cf 93       	push	r28
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     d46:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     d4a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <do_echo>
     d4e:	88 23       	and	r24, r24
     d50:	49 f0       	breq	.+18     	; 0xd64 <__vector_20+0x42>
     d52:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <bytes_in_out_buffer>
     d56:	8f 3f       	cpi	r24, 0xFF	; 255
     d58:	29 f0       	breq	.+10     	; 0xd64 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	8c 2f       	mov	r24, r28
     d60:	0e 94 96 05 	call	0xb2c	; 0xb2c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     d64:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <bytes_in_input_buffer>
     d68:	80 31       	cpi	r24, 0x10	; 16
     d6a:	20 f0       	brcs	.+8      	; 0xd74 <__vector_20+0x52>
		input_overrun = 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <input_overrun>
     d72:	18 c0       	rjmp	.+48     	; 0xda4 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     d74:	cd 30       	cpi	r28, 0x0D	; 13
     d76:	09 f4       	brne	.+2      	; 0xd7a <__vector_20+0x58>
			c = '\n';
     d78:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     d7a:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <input_insert_pos>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	8e 0f       	add	r24, r30
     d82:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <input_insert_pos>
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	e7 5a       	subi	r30, 0xA7	; 167
     d8a:	fd 4f       	sbci	r31, 0xFD	; 253
     d8c:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     d8e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <bytes_in_input_buffer>
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     d98:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <input_insert_pos>
     d9c:	80 31       	cpi	r24, 0x10	; 16
     d9e:	11 f4       	brne	.+4      	; 0xda4 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     da0:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <input_insert_pos>
		}
	}
}
     da4:	ff 91       	pop	r31
     da6:	ef 91       	pop	r30
     da8:	cf 91       	pop	r28
     daa:	bf 91       	pop	r27
     dac:	af 91       	pop	r26
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	7f 91       	pop	r23
     db4:	6f 91       	pop	r22
     db6:	5f 91       	pop	r21
     db8:	4f 91       	pop	r20
     dba:	3f 91       	pop	r19
     dbc:	2f 91       	pop	r18
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti

00000dc8 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     dc8:	94 b1       	in	r25, 0x04	; 4
     dca:	90 6b       	ori	r25, 0xB0	; 176
     dcc:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     dce:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     dd0:	90 e5       	ldi	r25, 0x50	; 80
     dd2:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	21 f0       	breq	.+8      	; 0xde0 <spi_setup_master+0x18>
     dd8:	80 32       	cpi	r24, 0x20	; 32
     dda:	11 f0       	breq	.+4      	; 0xde0 <spi_setup_master+0x18>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	19 f4       	brne	.+6      	; 0xde6 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9d bd       	out	0x2d, r25	; 45
			break;
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
     de6:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
     de8:	80 32       	cpi	r24, 0x20	; 32
     dea:	69 f0       	breq	.+26     	; 0xe06 <spi_setup_master+0x3e>
     dec:	28 f4       	brcc	.+10     	; 0xdf8 <spi_setup_master+0x30>
     dee:	88 30       	cpi	r24, 0x08	; 8
     df0:	71 f0       	breq	.+28     	; 0xe0e <spi_setup_master+0x46>
     df2:	80 31       	cpi	r24, 0x10	; 16
     df4:	61 f0       	breq	.+24     	; 0xe0e <spi_setup_master+0x46>
     df6:	0e c0       	rjmp	.+28     	; 0xe14 <spi_setup_master+0x4c>
     df8:	80 34       	cpi	r24, 0x40	; 64
     dfa:	29 f0       	breq	.+10     	; 0xe06 <spi_setup_master+0x3e>
     dfc:	80 38       	cpi	r24, 0x80	; 128
     dfe:	51 f4       	brne	.+20     	; 0xe14 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
     e00:	8c b5       	in	r24, 0x2c	; 44
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
     e06:	8c b5       	in	r24, 0x2c	; 44
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	8c bd       	out	0x2c, r24	; 44
			break;
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
     e0e:	8c b5       	in	r24, 0x2c	; 44
     e10:	81 60       	ori	r24, 0x01	; 1
     e12:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
     e14:	2c 98       	cbi	0x05, 4	; 5
     e16:	08 95       	ret

00000e18 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     e18:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
     e1a:	0d b4       	in	r0, 0x2d	; 45
     e1c:	07 fe       	sbrs	r0, 7
     e1e:	fd cf       	rjmp	.-6      	; 0xe1a <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     e20:	8e b5       	in	r24, 0x2e	; 46
     e22:	08 95       	ret

00000e24 <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
     e24:	9f 93       	push	r25
     e26:	8f 93       	push	r24
     e28:	7f 93       	push	r23
     e2a:	6f 93       	push	r22
     e2c:	86 ec       	ldi	r24, 0xC6	; 198
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	0e 94 98 08 	call	0x1130	; 0x1130 <printf_P>
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	08 95       	ret

00000e46 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
     e46:	81 ec       	ldi	r24, 0xC1	; 193
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	9f 93       	push	r25
     e4c:	8f 93       	push	r24
     e4e:	0e 94 98 08 	call	0x1130	; 0x1130 <printf_P>
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	08 95       	ret

00000e58 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
     e58:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <clockTicks>
     e5c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <clockTicks+0x1>
     e60:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <clockTicks+0x2>
     e64:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     e68:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     e6a:	8c e7       	ldi	r24, 0x7C	; 124
     e6c:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
     e76:	ee e6       	ldi	r30, 0x6E	; 110
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
     e80:	85 b3       	in	r24, 0x15	; 21
     e82:	82 70       	andi	r24, 0x02	; 2
     e84:	85 bb       	out	0x15, r24	; 21
     e86:	08 95       	ret

00000e88 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
     e88:	2f b7       	in	r18, 0x3f	; 63
	cli();
     e8a:	f8 94       	cli
	returnValue = clockTicks;
     e8c:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <clockTicks>
     e90:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <clockTicks+0x1>
     e94:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <clockTicks+0x2>
     e98:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <clockTicks+0x3>
	if(interruptsOn) {
     e9c:	22 23       	and	r18, r18
     e9e:	0c f4       	brge	.+2      	; 0xea2 <get_current_time+0x1a>
		sei();
     ea0:	78 94       	sei
	}
	return returnValue;
}
     ea2:	08 95       	ret

00000ea4 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
     eb6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <clockTicks>
     eba:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <clockTicks+0x1>
     ebe:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <clockTicks+0x2>
     ec2:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <clockTicks+0x3>
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	a1 1d       	adc	r26, r1
     eca:	b1 1d       	adc	r27, r1
     ecc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <clockTicks>
     ed0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <clockTicks+0x1>
     ed4:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <clockTicks+0x2>
     ed8:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <clockTicks+0x3>
}
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <__divmodsi4>:
     eee:	05 2e       	mov	r0, r21
     ef0:	97 fb       	bst	r25, 7
     ef2:	1e f4       	brtc	.+6      	; 0xefa <__divmodsi4+0xc>
     ef4:	00 94       	com	r0
     ef6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__negsi2>
     efa:	57 fd       	sbrc	r21, 7
     efc:	07 d0       	rcall	.+14     	; 0xf0c <__divmodsi4_neg2>
     efe:	0e 94 96 07 	call	0xf2c	; 0xf2c <__udivmodsi4>
     f02:	07 fc       	sbrc	r0, 7
     f04:	03 d0       	rcall	.+6      	; 0xf0c <__divmodsi4_neg2>
     f06:	4e f4       	brtc	.+18     	; 0xf1a <__divmodsi4_exit>
     f08:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__negsi2>

00000f0c <__divmodsi4_neg2>:
     f0c:	50 95       	com	r21
     f0e:	40 95       	com	r20
     f10:	30 95       	com	r19
     f12:	21 95       	neg	r18
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	4f 4f       	sbci	r20, 0xFF	; 255
     f18:	5f 4f       	sbci	r21, 0xFF	; 255

00000f1a <__divmodsi4_exit>:
     f1a:	08 95       	ret

00000f1c <__negsi2>:
     f1c:	90 95       	com	r25
     f1e:	80 95       	com	r24
     f20:	70 95       	com	r23
     f22:	61 95       	neg	r22
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	8f 4f       	sbci	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	08 95       	ret

00000f2c <__udivmodsi4>:
     f2c:	a1 e2       	ldi	r26, 0x21	; 33
     f2e:	1a 2e       	mov	r1, r26
     f30:	aa 1b       	sub	r26, r26
     f32:	bb 1b       	sub	r27, r27
     f34:	fd 01       	movw	r30, r26
     f36:	0d c0       	rjmp	.+26     	; 0xf52 <__udivmodsi4_ep>

00000f38 <__udivmodsi4_loop>:
     f38:	aa 1f       	adc	r26, r26
     f3a:	bb 1f       	adc	r27, r27
     f3c:	ee 1f       	adc	r30, r30
     f3e:	ff 1f       	adc	r31, r31
     f40:	a2 17       	cp	r26, r18
     f42:	b3 07       	cpc	r27, r19
     f44:	e4 07       	cpc	r30, r20
     f46:	f5 07       	cpc	r31, r21
     f48:	20 f0       	brcs	.+8      	; 0xf52 <__udivmodsi4_ep>
     f4a:	a2 1b       	sub	r26, r18
     f4c:	b3 0b       	sbc	r27, r19
     f4e:	e4 0b       	sbc	r30, r20
     f50:	f5 0b       	sbc	r31, r21

00000f52 <__udivmodsi4_ep>:
     f52:	66 1f       	adc	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	1a 94       	dec	r1
     f5c:	69 f7       	brne	.-38     	; 0xf38 <__udivmodsi4_loop>
     f5e:	60 95       	com	r22
     f60:	70 95       	com	r23
     f62:	80 95       	com	r24
     f64:	90 95       	com	r25
     f66:	9b 01       	movw	r18, r22
     f68:	ac 01       	movw	r20, r24
     f6a:	bd 01       	movw	r22, r26
     f6c:	cf 01       	movw	r24, r30
     f6e:	08 95       	ret

00000f70 <random_r>:
     f70:	8f 92       	push	r8
     f72:	9f 92       	push	r9
     f74:	af 92       	push	r10
     f76:	bf 92       	push	r11
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	ec 01       	movw	r28, r24
     f86:	68 81       	ld	r22, Y
     f88:	79 81       	ldd	r23, Y+1	; 0x01
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	61 15       	cp	r22, r1
     f90:	71 05       	cpc	r23, r1
     f92:	81 05       	cpc	r24, r1
     f94:	91 05       	cpc	r25, r1
     f96:	21 f4       	brne	.+8      	; 0xfa0 <random_r+0x30>
     f98:	64 e2       	ldi	r22, 0x24	; 36
     f9a:	79 ed       	ldi	r23, 0xD9	; 217
     f9c:	8b e5       	ldi	r24, 0x5B	; 91
     f9e:	97 e0       	ldi	r25, 0x07	; 7
     fa0:	2d e1       	ldi	r18, 0x1D	; 29
     fa2:	33 ef       	ldi	r19, 0xF3	; 243
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	0e 94 77 07 	call	0xeee	; 0xeee <__divmodsi4>
     fac:	49 01       	movw	r8, r18
     fae:	5a 01       	movw	r10, r20
     fb0:	9b 01       	movw	r18, r22
     fb2:	ac 01       	movw	r20, r24
     fb4:	a7 ea       	ldi	r26, 0xA7	; 167
     fb6:	b1 e4       	ldi	r27, 0x41	; 65
     fb8:	0e 94 4f 0b 	call	0x169e	; 0x169e <__muluhisi3>
     fbc:	6b 01       	movw	r12, r22
     fbe:	7c 01       	movw	r14, r24
     fc0:	ac ee       	ldi	r26, 0xEC	; 236
     fc2:	b4 ef       	ldi	r27, 0xF4	; 244
     fc4:	a5 01       	movw	r20, r10
     fc6:	94 01       	movw	r18, r8
     fc8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulohisi3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	8c 0d       	add	r24, r12
     fd2:	9d 1d       	adc	r25, r13
     fd4:	ae 1d       	adc	r26, r14
     fd6:	bf 1d       	adc	r27, r15
     fd8:	b7 ff       	sbrs	r27, 7
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <random_r+0x72>
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	a1 09       	sbc	r26, r1
     fe0:	b0 48       	sbci	r27, 0x80	; 128
     fe2:	88 83       	st	Y, r24
     fe4:	99 83       	std	Y+1, r25	; 0x01
     fe6:	aa 83       	std	Y+2, r26	; 0x02
     fe8:	bb 83       	std	Y+3, r27	; 0x03
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	9f 77       	andi	r25, 0x7F	; 127
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	bf 90       	pop	r11
     ffe:	af 90       	pop	r10
    1000:	9f 90       	pop	r9
    1002:	8f 90       	pop	r8
    1004:	08 95       	ret

00001006 <random>:
    1006:	8f 92       	push	r8
    1008:	9f 92       	push	r9
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    101a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    101e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1022:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1026:	61 15       	cp	r22, r1
    1028:	71 05       	cpc	r23, r1
    102a:	81 05       	cpc	r24, r1
    102c:	91 05       	cpc	r25, r1
    102e:	21 f4       	brne	.+8      	; 0x1038 <random+0x32>
    1030:	64 e2       	ldi	r22, 0x24	; 36
    1032:	79 ed       	ldi	r23, 0xD9	; 217
    1034:	8b e5       	ldi	r24, 0x5B	; 91
    1036:	97 e0       	ldi	r25, 0x07	; 7
    1038:	2d e1       	ldi	r18, 0x1D	; 29
    103a:	33 ef       	ldi	r19, 0xF3	; 243
    103c:	41 e0       	ldi	r20, 0x01	; 1
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	0e 94 77 07 	call	0xeee	; 0xeee <__divmodsi4>
    1044:	49 01       	movw	r8, r18
    1046:	5a 01       	movw	r10, r20
    1048:	9b 01       	movw	r18, r22
    104a:	ac 01       	movw	r20, r24
    104c:	a7 ea       	ldi	r26, 0xA7	; 167
    104e:	b1 e4       	ldi	r27, 0x41	; 65
    1050:	0e 94 4f 0b 	call	0x169e	; 0x169e <__muluhisi3>
    1054:	6b 01       	movw	r12, r22
    1056:	7c 01       	movw	r14, r24
    1058:	ac ee       	ldi	r26, 0xEC	; 236
    105a:	b4 ef       	ldi	r27, 0xF4	; 244
    105c:	a5 01       	movw	r20, r10
    105e:	94 01       	movw	r18, r8
    1060:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulohisi3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	8c 0d       	add	r24, r12
    106a:	9d 1d       	adc	r25, r13
    106c:	ae 1d       	adc	r26, r14
    106e:	bf 1d       	adc	r27, r15
    1070:	b7 ff       	sbrs	r27, 7
    1072:	03 c0       	rjmp	.+6      	; 0x107a <random+0x74>
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	a1 09       	sbc	r26, r1
    1078:	b0 48       	sbci	r27, 0x80	; 128
    107a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    107e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1082:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1086:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	9f 77       	andi	r25, 0x7F	; 127
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	9f 90       	pop	r9
    109e:	8f 90       	pop	r8
    10a0:	08 95       	ret

000010a2 <srandom>:
    10a2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    10a6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    10aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    10ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    10b2:	08 95       	ret

000010b4 <fgetc>:
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	ec 01       	movw	r28, r24
    10ba:	2b 81       	ldd	r18, Y+3	; 0x03
    10bc:	20 ff       	sbrs	r18, 0
    10be:	33 c0       	rjmp	.+102    	; 0x1126 <fgetc+0x72>
    10c0:	26 ff       	sbrs	r18, 6
    10c2:	0a c0       	rjmp	.+20     	; 0x10d8 <fgetc+0x24>
    10c4:	2f 7b       	andi	r18, 0xBF	; 191
    10c6:	2b 83       	std	Y+3, r18	; 0x03
    10c8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ca:	9f 81       	ldd	r25, Y+7	; 0x07
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	9f 83       	std	Y+7, r25	; 0x07
    10d0:	8e 83       	std	Y+6, r24	; 0x06
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	29 c0       	rjmp	.+82     	; 0x112a <fgetc+0x76>
    10d8:	22 ff       	sbrs	r18, 2
    10da:	0f c0       	rjmp	.+30     	; 0x10fa <fgetc+0x46>
    10dc:	e8 81       	ld	r30, Y
    10de:	f9 81       	ldd	r31, Y+1	; 0x01
    10e0:	80 81       	ld	r24, Z
    10e2:	08 2e       	mov	r0, r24
    10e4:	00 0c       	add	r0, r0
    10e6:	99 0b       	sbc	r25, r25
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <fgetc+0x3e>
    10ec:	20 62       	ori	r18, 0x20	; 32
    10ee:	2b 83       	std	Y+3, r18	; 0x03
    10f0:	1a c0       	rjmp	.+52     	; 0x1126 <fgetc+0x72>
    10f2:	31 96       	adiw	r30, 0x01	; 1
    10f4:	f9 83       	std	Y+1, r31	; 0x01
    10f6:	e8 83       	st	Y, r30
    10f8:	0e c0       	rjmp	.+28     	; 0x1116 <fgetc+0x62>
    10fa:	ea 85       	ldd	r30, Y+10	; 0x0a
    10fc:	fb 85       	ldd	r31, Y+11	; 0x0b
    10fe:	09 95       	icall
    1100:	97 ff       	sbrs	r25, 7
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <fgetc+0x62>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	11 f0       	breq	.+4      	; 0x110e <fgetc+0x5a>
    110a:	80 e2       	ldi	r24, 0x20	; 32
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <fgetc+0x5c>
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	82 2b       	or	r24, r18
    1112:	8b 83       	std	Y+3, r24	; 0x03
    1114:	08 c0       	rjmp	.+16     	; 0x1126 <fgetc+0x72>
    1116:	2e 81       	ldd	r18, Y+6	; 0x06
    1118:	3f 81       	ldd	r19, Y+7	; 0x07
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	3f 83       	std	Y+7, r19	; 0x07
    1120:	2e 83       	std	Y+6, r18	; 0x06
    1122:	99 27       	eor	r25, r25
    1124:	02 c0       	rjmp	.+4      	; 0x112a <fgetc+0x76>
    1126:	8f ef       	ldi	r24, 0xFF	; 255
    1128:	9f ef       	ldi	r25, 0xFF	; 255
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret

00001130 <printf_P>:
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ee e9       	ldi	r30, 0x9E	; 158
    1136:	f8 e0       	ldi	r31, 0x08	; 8
    1138:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__prologue_saves__+0x1c>
    113c:	ae 01       	movw	r20, r28
    113e:	49 5f       	subi	r20, 0xF9	; 249
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	da 01       	movw	r26, r20
    1144:	6d 91       	ld	r22, X+
    1146:	7d 91       	ld	r23, X+
    1148:	ad 01       	movw	r20, r26
    114a:	0b e6       	ldi	r16, 0x6B	; 107
    114c:	12 e0       	ldi	r17, 0x02	; 2
    114e:	f8 01       	movw	r30, r16
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	dc 01       	movw	r26, r24
    1156:	13 96       	adiw	r26, 0x03	; 3
    1158:	2c 91       	ld	r18, X
    115a:	13 97       	sbiw	r26, 0x03	; 3
    115c:	28 60       	ori	r18, 0x08	; 8
    115e:	13 96       	adiw	r26, 0x03	; 3
    1160:	2c 93       	st	X, r18
    1162:	0e 94 be 08 	call	0x117c	; 0x117c <vfprintf>
    1166:	d8 01       	movw	r26, r16
    1168:	12 96       	adiw	r26, 0x02	; 2
    116a:	ed 91       	ld	r30, X+
    116c:	fc 91       	ld	r31, X
    116e:	13 97       	sbiw	r26, 0x03	; 3
    1170:	23 81       	ldd	r18, Z+3	; 0x03
    1172:	27 7f       	andi	r18, 0xF7	; 247
    1174:	23 83       	std	Z+3, r18	; 0x03
    1176:	e4 e0       	ldi	r30, 0x04	; 4
    1178:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__epilogue_restores__+0x1c>

0000117c <vfprintf>:
    117c:	ab e0       	ldi	r26, 0x0B	; 11
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e4 ec       	ldi	r30, 0xC4	; 196
    1182:	f8 e0       	ldi	r31, 0x08	; 8
    1184:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__prologue_saves__>
    1188:	6c 01       	movw	r12, r24
    118a:	7b 01       	movw	r14, r22
    118c:	8a 01       	movw	r16, r20
    118e:	fc 01       	movw	r30, r24
    1190:	17 82       	std	Z+7, r1	; 0x07
    1192:	16 82       	std	Z+6, r1	; 0x06
    1194:	83 81       	ldd	r24, Z+3	; 0x03
    1196:	81 ff       	sbrs	r24, 1
    1198:	cc c1       	rjmp	.+920    	; 0x1532 <vfprintf+0x3b6>
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	3c 01       	movw	r6, r24
    11a0:	f6 01       	movw	r30, r12
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	f7 01       	movw	r30, r14
    11a6:	93 fd       	sbrc	r25, 3
    11a8:	85 91       	lpm	r24, Z+
    11aa:	93 ff       	sbrs	r25, 3
    11ac:	81 91       	ld	r24, Z+
    11ae:	7f 01       	movw	r14, r30
    11b0:	88 23       	and	r24, r24
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <vfprintf+0x3a>
    11b4:	ba c1       	rjmp	.+884    	; 0x152a <vfprintf+0x3ae>
    11b6:	85 32       	cpi	r24, 0x25	; 37
    11b8:	39 f4       	brne	.+14     	; 0x11c8 <vfprintf+0x4c>
    11ba:	93 fd       	sbrc	r25, 3
    11bc:	85 91       	lpm	r24, Z+
    11be:	93 ff       	sbrs	r25, 3
    11c0:	81 91       	ld	r24, Z+
    11c2:	7f 01       	movw	r14, r30
    11c4:	85 32       	cpi	r24, 0x25	; 37
    11c6:	29 f4       	brne	.+10     	; 0x11d2 <vfprintf+0x56>
    11c8:	b6 01       	movw	r22, r12
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    11d0:	e7 cf       	rjmp	.-50     	; 0x11a0 <vfprintf+0x24>
    11d2:	91 2c       	mov	r9, r1
    11d4:	21 2c       	mov	r2, r1
    11d6:	31 2c       	mov	r3, r1
    11d8:	ff e1       	ldi	r31, 0x1F	; 31
    11da:	f3 15       	cp	r31, r3
    11dc:	d8 f0       	brcs	.+54     	; 0x1214 <vfprintf+0x98>
    11de:	8b 32       	cpi	r24, 0x2B	; 43
    11e0:	79 f0       	breq	.+30     	; 0x1200 <vfprintf+0x84>
    11e2:	38 f4       	brcc	.+14     	; 0x11f2 <vfprintf+0x76>
    11e4:	80 32       	cpi	r24, 0x20	; 32
    11e6:	79 f0       	breq	.+30     	; 0x1206 <vfprintf+0x8a>
    11e8:	83 32       	cpi	r24, 0x23	; 35
    11ea:	a1 f4       	brne	.+40     	; 0x1214 <vfprintf+0x98>
    11ec:	23 2d       	mov	r18, r3
    11ee:	20 61       	ori	r18, 0x10	; 16
    11f0:	1d c0       	rjmp	.+58     	; 0x122c <vfprintf+0xb0>
    11f2:	8d 32       	cpi	r24, 0x2D	; 45
    11f4:	61 f0       	breq	.+24     	; 0x120e <vfprintf+0x92>
    11f6:	80 33       	cpi	r24, 0x30	; 48
    11f8:	69 f4       	brne	.+26     	; 0x1214 <vfprintf+0x98>
    11fa:	23 2d       	mov	r18, r3
    11fc:	21 60       	ori	r18, 0x01	; 1
    11fe:	16 c0       	rjmp	.+44     	; 0x122c <vfprintf+0xb0>
    1200:	83 2d       	mov	r24, r3
    1202:	82 60       	ori	r24, 0x02	; 2
    1204:	38 2e       	mov	r3, r24
    1206:	e3 2d       	mov	r30, r3
    1208:	e4 60       	ori	r30, 0x04	; 4
    120a:	3e 2e       	mov	r3, r30
    120c:	2a c0       	rjmp	.+84     	; 0x1262 <vfprintf+0xe6>
    120e:	f3 2d       	mov	r31, r3
    1210:	f8 60       	ori	r31, 0x08	; 8
    1212:	1d c0       	rjmp	.+58     	; 0x124e <vfprintf+0xd2>
    1214:	37 fc       	sbrc	r3, 7
    1216:	2d c0       	rjmp	.+90     	; 0x1272 <vfprintf+0xf6>
    1218:	20 ed       	ldi	r18, 0xD0	; 208
    121a:	28 0f       	add	r18, r24
    121c:	2a 30       	cpi	r18, 0x0A	; 10
    121e:	40 f0       	brcs	.+16     	; 0x1230 <vfprintf+0xb4>
    1220:	8e 32       	cpi	r24, 0x2E	; 46
    1222:	b9 f4       	brne	.+46     	; 0x1252 <vfprintf+0xd6>
    1224:	36 fc       	sbrc	r3, 6
    1226:	81 c1       	rjmp	.+770    	; 0x152a <vfprintf+0x3ae>
    1228:	23 2d       	mov	r18, r3
    122a:	20 64       	ori	r18, 0x40	; 64
    122c:	32 2e       	mov	r3, r18
    122e:	19 c0       	rjmp	.+50     	; 0x1262 <vfprintf+0xe6>
    1230:	36 fe       	sbrs	r3, 6
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <vfprintf+0xc4>
    1234:	8a e0       	ldi	r24, 0x0A	; 10
    1236:	98 9e       	mul	r9, r24
    1238:	20 0d       	add	r18, r0
    123a:	11 24       	eor	r1, r1
    123c:	92 2e       	mov	r9, r18
    123e:	11 c0       	rjmp	.+34     	; 0x1262 <vfprintf+0xe6>
    1240:	ea e0       	ldi	r30, 0x0A	; 10
    1242:	2e 9e       	mul	r2, r30
    1244:	20 0d       	add	r18, r0
    1246:	11 24       	eor	r1, r1
    1248:	22 2e       	mov	r2, r18
    124a:	f3 2d       	mov	r31, r3
    124c:	f0 62       	ori	r31, 0x20	; 32
    124e:	3f 2e       	mov	r3, r31
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <vfprintf+0xe6>
    1252:	8c 36       	cpi	r24, 0x6C	; 108
    1254:	21 f4       	brne	.+8      	; 0x125e <vfprintf+0xe2>
    1256:	83 2d       	mov	r24, r3
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	38 2e       	mov	r3, r24
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <vfprintf+0xe6>
    125e:	88 36       	cpi	r24, 0x68	; 104
    1260:	41 f4       	brne	.+16     	; 0x1272 <vfprintf+0xf6>
    1262:	f7 01       	movw	r30, r14
    1264:	93 fd       	sbrc	r25, 3
    1266:	85 91       	lpm	r24, Z+
    1268:	93 ff       	sbrs	r25, 3
    126a:	81 91       	ld	r24, Z+
    126c:	7f 01       	movw	r14, r30
    126e:	81 11       	cpse	r24, r1
    1270:	b3 cf       	rjmp	.-154    	; 0x11d8 <vfprintf+0x5c>
    1272:	98 2f       	mov	r25, r24
    1274:	9f 7d       	andi	r25, 0xDF	; 223
    1276:	95 54       	subi	r25, 0x45	; 69
    1278:	93 30       	cpi	r25, 0x03	; 3
    127a:	28 f4       	brcc	.+10     	; 0x1286 <vfprintf+0x10a>
    127c:	0c 5f       	subi	r16, 0xFC	; 252
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	9f e3       	ldi	r25, 0x3F	; 63
    1282:	99 83       	std	Y+1, r25	; 0x01
    1284:	0d c0       	rjmp	.+26     	; 0x12a0 <vfprintf+0x124>
    1286:	83 36       	cpi	r24, 0x63	; 99
    1288:	31 f0       	breq	.+12     	; 0x1296 <vfprintf+0x11a>
    128a:	83 37       	cpi	r24, 0x73	; 115
    128c:	71 f0       	breq	.+28     	; 0x12aa <vfprintf+0x12e>
    128e:	83 35       	cpi	r24, 0x53	; 83
    1290:	09 f0       	breq	.+2      	; 0x1294 <vfprintf+0x118>
    1292:	59 c0       	rjmp	.+178    	; 0x1346 <vfprintf+0x1ca>
    1294:	21 c0       	rjmp	.+66     	; 0x12d8 <vfprintf+0x15c>
    1296:	f8 01       	movw	r30, r16
    1298:	80 81       	ld	r24, Z
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	0e 5f       	subi	r16, 0xFE	; 254
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	88 24       	eor	r8, r8
    12a2:	83 94       	inc	r8
    12a4:	91 2c       	mov	r9, r1
    12a6:	53 01       	movw	r10, r6
    12a8:	13 c0       	rjmp	.+38     	; 0x12d0 <vfprintf+0x154>
    12aa:	28 01       	movw	r4, r16
    12ac:	f2 e0       	ldi	r31, 0x02	; 2
    12ae:	4f 0e       	add	r4, r31
    12b0:	51 1c       	adc	r5, r1
    12b2:	f8 01       	movw	r30, r16
    12b4:	a0 80       	ld	r10, Z
    12b6:	b1 80       	ldd	r11, Z+1	; 0x01
    12b8:	36 fe       	sbrs	r3, 6
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <vfprintf+0x146>
    12bc:	69 2d       	mov	r22, r9
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x14a>
    12c2:	6f ef       	ldi	r22, 0xFF	; 255
    12c4:	7f ef       	ldi	r23, 0xFF	; 255
    12c6:	c5 01       	movw	r24, r10
    12c8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <strnlen>
    12cc:	4c 01       	movw	r8, r24
    12ce:	82 01       	movw	r16, r4
    12d0:	f3 2d       	mov	r31, r3
    12d2:	ff 77       	andi	r31, 0x7F	; 127
    12d4:	3f 2e       	mov	r3, r31
    12d6:	16 c0       	rjmp	.+44     	; 0x1304 <vfprintf+0x188>
    12d8:	28 01       	movw	r4, r16
    12da:	22 e0       	ldi	r18, 0x02	; 2
    12dc:	42 0e       	add	r4, r18
    12de:	51 1c       	adc	r5, r1
    12e0:	f8 01       	movw	r30, r16
    12e2:	a0 80       	ld	r10, Z
    12e4:	b1 80       	ldd	r11, Z+1	; 0x01
    12e6:	36 fe       	sbrs	r3, 6
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <vfprintf+0x174>
    12ea:	69 2d       	mov	r22, r9
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <vfprintf+0x178>
    12f0:	6f ef       	ldi	r22, 0xFF	; 255
    12f2:	7f ef       	ldi	r23, 0xFF	; 255
    12f4:	c5 01       	movw	r24, r10
    12f6:	0e 94 9f 0a 	call	0x153e	; 0x153e <strnlen_P>
    12fa:	4c 01       	movw	r8, r24
    12fc:	f3 2d       	mov	r31, r3
    12fe:	f0 68       	ori	r31, 0x80	; 128
    1300:	3f 2e       	mov	r3, r31
    1302:	82 01       	movw	r16, r4
    1304:	33 fc       	sbrc	r3, 3
    1306:	1b c0       	rjmp	.+54     	; 0x133e <vfprintf+0x1c2>
    1308:	82 2d       	mov	r24, r2
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 16       	cp	r8, r24
    130e:	99 06       	cpc	r9, r25
    1310:	b0 f4       	brcc	.+44     	; 0x133e <vfprintf+0x1c2>
    1312:	b6 01       	movw	r22, r12
    1314:	80 e2       	ldi	r24, 0x20	; 32
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    131c:	2a 94       	dec	r2
    131e:	f4 cf       	rjmp	.-24     	; 0x1308 <vfprintf+0x18c>
    1320:	f5 01       	movw	r30, r10
    1322:	37 fc       	sbrc	r3, 7
    1324:	85 91       	lpm	r24, Z+
    1326:	37 fe       	sbrs	r3, 7
    1328:	81 91       	ld	r24, Z+
    132a:	5f 01       	movw	r10, r30
    132c:	b6 01       	movw	r22, r12
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    1334:	21 10       	cpse	r2, r1
    1336:	2a 94       	dec	r2
    1338:	21 e0       	ldi	r18, 0x01	; 1
    133a:	82 1a       	sub	r8, r18
    133c:	91 08       	sbc	r9, r1
    133e:	81 14       	cp	r8, r1
    1340:	91 04       	cpc	r9, r1
    1342:	71 f7       	brne	.-36     	; 0x1320 <vfprintf+0x1a4>
    1344:	e8 c0       	rjmp	.+464    	; 0x1516 <vfprintf+0x39a>
    1346:	84 36       	cpi	r24, 0x64	; 100
    1348:	11 f0       	breq	.+4      	; 0x134e <vfprintf+0x1d2>
    134a:	89 36       	cpi	r24, 0x69	; 105
    134c:	41 f5       	brne	.+80     	; 0x139e <vfprintf+0x222>
    134e:	f8 01       	movw	r30, r16
    1350:	37 fe       	sbrs	r3, 7
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <vfprintf+0x1e6>
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	0c 5f       	subi	r16, 0xFC	; 252
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <vfprintf+0x1f6>
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	07 2e       	mov	r0, r23
    1368:	00 0c       	add	r0, r0
    136a:	88 0b       	sbc	r24, r24
    136c:	99 0b       	sbc	r25, r25
    136e:	0e 5f       	subi	r16, 0xFE	; 254
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	f3 2d       	mov	r31, r3
    1374:	ff 76       	andi	r31, 0x6F	; 111
    1376:	3f 2e       	mov	r3, r31
    1378:	97 ff       	sbrs	r25, 7
    137a:	09 c0       	rjmp	.+18     	; 0x138e <vfprintf+0x212>
    137c:	90 95       	com	r25
    137e:	80 95       	com	r24
    1380:	70 95       	com	r23
    1382:	61 95       	neg	r22
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	8f 4f       	sbci	r24, 0xFF	; 255
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	f0 68       	ori	r31, 0x80	; 128
    138c:	3f 2e       	mov	r3, r31
    138e:	2a e0       	ldi	r18, 0x0A	; 10
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	a3 01       	movw	r20, r6
    1394:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__ultoa_invert>
    1398:	88 2e       	mov	r8, r24
    139a:	86 18       	sub	r8, r6
    139c:	45 c0       	rjmp	.+138    	; 0x1428 <vfprintf+0x2ac>
    139e:	85 37       	cpi	r24, 0x75	; 117
    13a0:	31 f4       	brne	.+12     	; 0x13ae <vfprintf+0x232>
    13a2:	23 2d       	mov	r18, r3
    13a4:	2f 7e       	andi	r18, 0xEF	; 239
    13a6:	b2 2e       	mov	r11, r18
    13a8:	2a e0       	ldi	r18, 0x0A	; 10
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	25 c0       	rjmp	.+74     	; 0x13f8 <vfprintf+0x27c>
    13ae:	93 2d       	mov	r25, r3
    13b0:	99 7f       	andi	r25, 0xF9	; 249
    13b2:	b9 2e       	mov	r11, r25
    13b4:	8f 36       	cpi	r24, 0x6F	; 111
    13b6:	c1 f0       	breq	.+48     	; 0x13e8 <vfprintf+0x26c>
    13b8:	18 f4       	brcc	.+6      	; 0x13c0 <vfprintf+0x244>
    13ba:	88 35       	cpi	r24, 0x58	; 88
    13bc:	79 f0       	breq	.+30     	; 0x13dc <vfprintf+0x260>
    13be:	b5 c0       	rjmp	.+362    	; 0x152a <vfprintf+0x3ae>
    13c0:	80 37       	cpi	r24, 0x70	; 112
    13c2:	19 f0       	breq	.+6      	; 0x13ca <vfprintf+0x24e>
    13c4:	88 37       	cpi	r24, 0x78	; 120
    13c6:	21 f0       	breq	.+8      	; 0x13d0 <vfprintf+0x254>
    13c8:	b0 c0       	rjmp	.+352    	; 0x152a <vfprintf+0x3ae>
    13ca:	e9 2f       	mov	r30, r25
    13cc:	e0 61       	ori	r30, 0x10	; 16
    13ce:	be 2e       	mov	r11, r30
    13d0:	b4 fe       	sbrs	r11, 4
    13d2:	0d c0       	rjmp	.+26     	; 0x13ee <vfprintf+0x272>
    13d4:	fb 2d       	mov	r31, r11
    13d6:	f4 60       	ori	r31, 0x04	; 4
    13d8:	bf 2e       	mov	r11, r31
    13da:	09 c0       	rjmp	.+18     	; 0x13ee <vfprintf+0x272>
    13dc:	34 fe       	sbrs	r3, 4
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <vfprintf+0x278>
    13e0:	29 2f       	mov	r18, r25
    13e2:	26 60       	ori	r18, 0x06	; 6
    13e4:	b2 2e       	mov	r11, r18
    13e6:	06 c0       	rjmp	.+12     	; 0x13f4 <vfprintf+0x278>
    13e8:	28 e0       	ldi	r18, 0x08	; 8
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <vfprintf+0x27c>
    13ee:	20 e1       	ldi	r18, 0x10	; 16
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <vfprintf+0x27c>
    13f4:	20 e1       	ldi	r18, 0x10	; 16
    13f6:	32 e0       	ldi	r19, 0x02	; 2
    13f8:	f8 01       	movw	r30, r16
    13fa:	b7 fe       	sbrs	r11, 7
    13fc:	07 c0       	rjmp	.+14     	; 0x140c <vfprintf+0x290>
    13fe:	60 81       	ld	r22, Z
    1400:	71 81       	ldd	r23, Z+1	; 0x01
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	0c 5f       	subi	r16, 0xFC	; 252
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <vfprintf+0x29c>
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 5f       	subi	r16, 0xFE	; 254
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	a3 01       	movw	r20, r6
    141a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__ultoa_invert>
    141e:	88 2e       	mov	r8, r24
    1420:	86 18       	sub	r8, r6
    1422:	fb 2d       	mov	r31, r11
    1424:	ff 77       	andi	r31, 0x7F	; 127
    1426:	3f 2e       	mov	r3, r31
    1428:	36 fe       	sbrs	r3, 6
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <vfprintf+0x2ca>
    142c:	23 2d       	mov	r18, r3
    142e:	2e 7f       	andi	r18, 0xFE	; 254
    1430:	a2 2e       	mov	r10, r18
    1432:	89 14       	cp	r8, r9
    1434:	58 f4       	brcc	.+22     	; 0x144c <vfprintf+0x2d0>
    1436:	34 fe       	sbrs	r3, 4
    1438:	0b c0       	rjmp	.+22     	; 0x1450 <vfprintf+0x2d4>
    143a:	32 fc       	sbrc	r3, 2
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <vfprintf+0x2d4>
    143e:	83 2d       	mov	r24, r3
    1440:	8e 7e       	andi	r24, 0xEE	; 238
    1442:	a8 2e       	mov	r10, r24
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <vfprintf+0x2d4>
    1446:	b8 2c       	mov	r11, r8
    1448:	a3 2c       	mov	r10, r3
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <vfprintf+0x2d6>
    144c:	b8 2c       	mov	r11, r8
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <vfprintf+0x2d6>
    1450:	b9 2c       	mov	r11, r9
    1452:	a4 fe       	sbrs	r10, 4
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <vfprintf+0x2f8>
    1456:	fe 01       	movw	r30, r28
    1458:	e8 0d       	add	r30, r8
    145a:	f1 1d       	adc	r31, r1
    145c:	80 81       	ld	r24, Z
    145e:	80 33       	cpi	r24, 0x30	; 48
    1460:	21 f4       	brne	.+8      	; 0x146a <vfprintf+0x2ee>
    1462:	9a 2d       	mov	r25, r10
    1464:	99 7e       	andi	r25, 0xE9	; 233
    1466:	a9 2e       	mov	r10, r25
    1468:	09 c0       	rjmp	.+18     	; 0x147c <vfprintf+0x300>
    146a:	a2 fe       	sbrs	r10, 2
    146c:	06 c0       	rjmp	.+12     	; 0x147a <vfprintf+0x2fe>
    146e:	b3 94       	inc	r11
    1470:	b3 94       	inc	r11
    1472:	04 c0       	rjmp	.+8      	; 0x147c <vfprintf+0x300>
    1474:	8a 2d       	mov	r24, r10
    1476:	86 78       	andi	r24, 0x86	; 134
    1478:	09 f0       	breq	.+2      	; 0x147c <vfprintf+0x300>
    147a:	b3 94       	inc	r11
    147c:	a3 fc       	sbrc	r10, 3
    147e:	11 c0       	rjmp	.+34     	; 0x14a2 <vfprintf+0x326>
    1480:	a0 fe       	sbrs	r10, 0
    1482:	06 c0       	rjmp	.+12     	; 0x1490 <vfprintf+0x314>
    1484:	b2 14       	cp	r11, r2
    1486:	88 f4       	brcc	.+34     	; 0x14aa <vfprintf+0x32e>
    1488:	28 0c       	add	r2, r8
    148a:	92 2c       	mov	r9, r2
    148c:	9b 18       	sub	r9, r11
    148e:	0e c0       	rjmp	.+28     	; 0x14ac <vfprintf+0x330>
    1490:	b2 14       	cp	r11, r2
    1492:	60 f4       	brcc	.+24     	; 0x14ac <vfprintf+0x330>
    1494:	b6 01       	movw	r22, r12
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    149e:	b3 94       	inc	r11
    14a0:	f7 cf       	rjmp	.-18     	; 0x1490 <vfprintf+0x314>
    14a2:	b2 14       	cp	r11, r2
    14a4:	18 f4       	brcc	.+6      	; 0x14ac <vfprintf+0x330>
    14a6:	2b 18       	sub	r2, r11
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x332>
    14aa:	98 2c       	mov	r9, r8
    14ac:	21 2c       	mov	r2, r1
    14ae:	a4 fe       	sbrs	r10, 4
    14b0:	10 c0       	rjmp	.+32     	; 0x14d2 <vfprintf+0x356>
    14b2:	b6 01       	movw	r22, r12
    14b4:	80 e3       	ldi	r24, 0x30	; 48
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    14bc:	a2 fe       	sbrs	r10, 2
    14be:	17 c0       	rjmp	.+46     	; 0x14ee <vfprintf+0x372>
    14c0:	a1 fc       	sbrc	r10, 1
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <vfprintf+0x34e>
    14c4:	88 e7       	ldi	r24, 0x78	; 120
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <vfprintf+0x352>
    14ca:	88 e5       	ldi	r24, 0x58	; 88
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	b6 01       	movw	r22, r12
    14d0:	0c c0       	rjmp	.+24     	; 0x14ea <vfprintf+0x36e>
    14d2:	8a 2d       	mov	r24, r10
    14d4:	86 78       	andi	r24, 0x86	; 134
    14d6:	59 f0       	breq	.+22     	; 0x14ee <vfprintf+0x372>
    14d8:	a1 fe       	sbrs	r10, 1
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <vfprintf+0x364>
    14dc:	8b e2       	ldi	r24, 0x2B	; 43
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <vfprintf+0x366>
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	a7 fc       	sbrc	r10, 7
    14e4:	8d e2       	ldi	r24, 0x2D	; 45
    14e6:	b6 01       	movw	r22, r12
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    14ee:	89 14       	cp	r8, r9
    14f0:	38 f4       	brcc	.+14     	; 0x1500 <vfprintf+0x384>
    14f2:	b6 01       	movw	r22, r12
    14f4:	80 e3       	ldi	r24, 0x30	; 48
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    14fc:	9a 94       	dec	r9
    14fe:	f7 cf       	rjmp	.-18     	; 0x14ee <vfprintf+0x372>
    1500:	8a 94       	dec	r8
    1502:	f3 01       	movw	r30, r6
    1504:	e8 0d       	add	r30, r8
    1506:	f1 1d       	adc	r31, r1
    1508:	80 81       	ld	r24, Z
    150a:	b6 01       	movw	r22, r12
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    1512:	81 10       	cpse	r8, r1
    1514:	f5 cf       	rjmp	.-22     	; 0x1500 <vfprintf+0x384>
    1516:	22 20       	and	r2, r2
    1518:	09 f4       	brne	.+2      	; 0x151c <vfprintf+0x3a0>
    151a:	42 ce       	rjmp	.-892    	; 0x11a0 <vfprintf+0x24>
    151c:	b6 01       	movw	r22, r12
    151e:	80 e2       	ldi	r24, 0x20	; 32
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 b5 0a 	call	0x156a	; 0x156a <fputc>
    1526:	2a 94       	dec	r2
    1528:	f6 cf       	rjmp	.-20     	; 0x1516 <vfprintf+0x39a>
    152a:	f6 01       	movw	r30, r12
    152c:	86 81       	ldd	r24, Z+6	; 0x06
    152e:	97 81       	ldd	r25, Z+7	; 0x07
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <vfprintf+0x3ba>
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	9f ef       	ldi	r25, 0xFF	; 255
    1536:	2b 96       	adiw	r28, 0x0b	; 11
    1538:	e2 e1       	ldi	r30, 0x12	; 18
    153a:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__epilogue_restores__>

0000153e <strnlen_P>:
    153e:	fc 01       	movw	r30, r24
    1540:	05 90       	lpm	r0, Z+
    1542:	61 50       	subi	r22, 0x01	; 1
    1544:	70 40       	sbci	r23, 0x00	; 0
    1546:	01 10       	cpse	r0, r1
    1548:	d8 f7       	brcc	.-10     	; 0x1540 <strnlen_P+0x2>
    154a:	80 95       	com	r24
    154c:	90 95       	com	r25
    154e:	8e 0f       	add	r24, r30
    1550:	9f 1f       	adc	r25, r31
    1552:	08 95       	ret

00001554 <strnlen>:
    1554:	fc 01       	movw	r30, r24
    1556:	61 50       	subi	r22, 0x01	; 1
    1558:	70 40       	sbci	r23, 0x00	; 0
    155a:	01 90       	ld	r0, Z+
    155c:	01 10       	cpse	r0, r1
    155e:	d8 f7       	brcc	.-10     	; 0x1556 <strnlen+0x2>
    1560:	80 95       	com	r24
    1562:	90 95       	com	r25
    1564:	8e 0f       	add	r24, r30
    1566:	9f 1f       	adc	r25, r31
    1568:	08 95       	ret

0000156a <fputc>:
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	fb 01       	movw	r30, r22
    1574:	23 81       	ldd	r18, Z+3	; 0x03
    1576:	21 fd       	sbrc	r18, 1
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <fputc+0x16>
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	9f ef       	ldi	r25, 0xFF	; 255
    157e:	2c c0       	rjmp	.+88     	; 0x15d8 <fputc+0x6e>
    1580:	22 ff       	sbrs	r18, 2
    1582:	16 c0       	rjmp	.+44     	; 0x15b0 <fputc+0x46>
    1584:	46 81       	ldd	r20, Z+6	; 0x06
    1586:	57 81       	ldd	r21, Z+7	; 0x07
    1588:	24 81       	ldd	r18, Z+4	; 0x04
    158a:	35 81       	ldd	r19, Z+5	; 0x05
    158c:	42 17       	cp	r20, r18
    158e:	53 07       	cpc	r21, r19
    1590:	44 f4       	brge	.+16     	; 0x15a2 <fputc+0x38>
    1592:	a0 81       	ld	r26, Z
    1594:	b1 81       	ldd	r27, Z+1	; 0x01
    1596:	9d 01       	movw	r18, r26
    1598:	2f 5f       	subi	r18, 0xFF	; 255
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	31 83       	std	Z+1, r19	; 0x01
    159e:	20 83       	st	Z, r18
    15a0:	8c 93       	st	X, r24
    15a2:	26 81       	ldd	r18, Z+6	; 0x06
    15a4:	37 81       	ldd	r19, Z+7	; 0x07
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	37 83       	std	Z+7, r19	; 0x07
    15ac:	26 83       	std	Z+6, r18	; 0x06
    15ae:	14 c0       	rjmp	.+40     	; 0x15d8 <fputc+0x6e>
    15b0:	8b 01       	movw	r16, r22
    15b2:	ec 01       	movw	r28, r24
    15b4:	fb 01       	movw	r30, r22
    15b6:	00 84       	ldd	r0, Z+8	; 0x08
    15b8:	f1 85       	ldd	r31, Z+9	; 0x09
    15ba:	e0 2d       	mov	r30, r0
    15bc:	09 95       	icall
    15be:	89 2b       	or	r24, r25
    15c0:	e1 f6       	brne	.-72     	; 0x157a <fputc+0x10>
    15c2:	d8 01       	movw	r26, r16
    15c4:	16 96       	adiw	r26, 0x06	; 6
    15c6:	8d 91       	ld	r24, X+
    15c8:	9c 91       	ld	r25, X
    15ca:	17 97       	sbiw	r26, 0x07	; 7
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	17 96       	adiw	r26, 0x07	; 7
    15d0:	9c 93       	st	X, r25
    15d2:	8e 93       	st	-X, r24
    15d4:	16 97       	sbiw	r26, 0x06	; 6
    15d6:	ce 01       	movw	r24, r28
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	08 95       	ret

000015e2 <__ultoa_invert>:
    15e2:	fa 01       	movw	r30, r20
    15e4:	aa 27       	eor	r26, r26
    15e6:	28 30       	cpi	r18, 0x08	; 8
    15e8:	51 f1       	breq	.+84     	; 0x163e <__ultoa_invert+0x5c>
    15ea:	20 31       	cpi	r18, 0x10	; 16
    15ec:	81 f1       	breq	.+96     	; 0x164e <__ultoa_invert+0x6c>
    15ee:	e8 94       	clt
    15f0:	6f 93       	push	r22
    15f2:	6e 7f       	andi	r22, 0xFE	; 254
    15f4:	6e 5f       	subi	r22, 0xFE	; 254
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	8f 4f       	sbci	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	af 4f       	sbci	r26, 0xFF	; 255
    15fe:	b1 e0       	ldi	r27, 0x01	; 1
    1600:	3e d0       	rcall	.+124    	; 0x167e <__ultoa_invert+0x9c>
    1602:	b4 e0       	ldi	r27, 0x04	; 4
    1604:	3c d0       	rcall	.+120    	; 0x167e <__ultoa_invert+0x9c>
    1606:	67 0f       	add	r22, r23
    1608:	78 1f       	adc	r23, r24
    160a:	89 1f       	adc	r24, r25
    160c:	9a 1f       	adc	r25, r26
    160e:	a1 1d       	adc	r26, r1
    1610:	68 0f       	add	r22, r24
    1612:	79 1f       	adc	r23, r25
    1614:	8a 1f       	adc	r24, r26
    1616:	91 1d       	adc	r25, r1
    1618:	a1 1d       	adc	r26, r1
    161a:	6a 0f       	add	r22, r26
    161c:	71 1d       	adc	r23, r1
    161e:	81 1d       	adc	r24, r1
    1620:	91 1d       	adc	r25, r1
    1622:	a1 1d       	adc	r26, r1
    1624:	20 d0       	rcall	.+64     	; 0x1666 <__ultoa_invert+0x84>
    1626:	09 f4       	brne	.+2      	; 0x162a <__ultoa_invert+0x48>
    1628:	68 94       	set
    162a:	3f 91       	pop	r19
    162c:	2a e0       	ldi	r18, 0x0A	; 10
    162e:	26 9f       	mul	r18, r22
    1630:	11 24       	eor	r1, r1
    1632:	30 19       	sub	r19, r0
    1634:	30 5d       	subi	r19, 0xD0	; 208
    1636:	31 93       	st	Z+, r19
    1638:	de f6       	brtc	.-74     	; 0x15f0 <__ultoa_invert+0xe>
    163a:	cf 01       	movw	r24, r30
    163c:	08 95       	ret
    163e:	46 2f       	mov	r20, r22
    1640:	47 70       	andi	r20, 0x07	; 7
    1642:	40 5d       	subi	r20, 0xD0	; 208
    1644:	41 93       	st	Z+, r20
    1646:	b3 e0       	ldi	r27, 0x03	; 3
    1648:	0f d0       	rcall	.+30     	; 0x1668 <__ultoa_invert+0x86>
    164a:	c9 f7       	brne	.-14     	; 0x163e <__ultoa_invert+0x5c>
    164c:	f6 cf       	rjmp	.-20     	; 0x163a <__ultoa_invert+0x58>
    164e:	46 2f       	mov	r20, r22
    1650:	4f 70       	andi	r20, 0x0F	; 15
    1652:	40 5d       	subi	r20, 0xD0	; 208
    1654:	4a 33       	cpi	r20, 0x3A	; 58
    1656:	18 f0       	brcs	.+6      	; 0x165e <__ultoa_invert+0x7c>
    1658:	49 5d       	subi	r20, 0xD9	; 217
    165a:	31 fd       	sbrc	r19, 1
    165c:	40 52       	subi	r20, 0x20	; 32
    165e:	41 93       	st	Z+, r20
    1660:	02 d0       	rcall	.+4      	; 0x1666 <__ultoa_invert+0x84>
    1662:	a9 f7       	brne	.-22     	; 0x164e <__ultoa_invert+0x6c>
    1664:	ea cf       	rjmp	.-44     	; 0x163a <__ultoa_invert+0x58>
    1666:	b4 e0       	ldi	r27, 0x04	; 4
    1668:	a6 95       	lsr	r26
    166a:	97 95       	ror	r25
    166c:	87 95       	ror	r24
    166e:	77 95       	ror	r23
    1670:	67 95       	ror	r22
    1672:	ba 95       	dec	r27
    1674:	c9 f7       	brne	.-14     	; 0x1668 <__ultoa_invert+0x86>
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	61 05       	cpc	r22, r1
    167a:	71 05       	cpc	r23, r1
    167c:	08 95       	ret
    167e:	9b 01       	movw	r18, r22
    1680:	ac 01       	movw	r20, r24
    1682:	0a 2e       	mov	r0, r26
    1684:	06 94       	lsr	r0
    1686:	57 95       	ror	r21
    1688:	47 95       	ror	r20
    168a:	37 95       	ror	r19
    168c:	27 95       	ror	r18
    168e:	ba 95       	dec	r27
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__ultoa_invert+0xa2>
    1692:	62 0f       	add	r22, r18
    1694:	73 1f       	adc	r23, r19
    1696:	84 1f       	adc	r24, r20
    1698:	95 1f       	adc	r25, r21
    169a:	a0 1d       	adc	r26, r0
    169c:	08 95       	ret

0000169e <__muluhisi3>:
    169e:	0e 94 99 0b 	call	0x1732	; 0x1732 <__umulhisi3>
    16a2:	a5 9f       	mul	r26, r21
    16a4:	90 0d       	add	r25, r0
    16a6:	b4 9f       	mul	r27, r20
    16a8:	90 0d       	add	r25, r0
    16aa:	a4 9f       	mul	r26, r20
    16ac:	80 0d       	add	r24, r0
    16ae:	91 1d       	adc	r25, r1
    16b0:	11 24       	eor	r1, r1
    16b2:	08 95       	ret

000016b4 <__mulshisi3>:
    16b4:	b7 ff       	sbrs	r27, 7
    16b6:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__muluhisi3>

000016ba <__mulohisi3>:
    16ba:	0e 94 4f 0b 	call	0x169e	; 0x169e <__muluhisi3>
    16be:	82 1b       	sub	r24, r18
    16c0:	93 0b       	sbc	r25, r19
    16c2:	08 95       	ret

000016c4 <__prologue_saves__>:
    16c4:	2f 92       	push	r2
    16c6:	3f 92       	push	r3
    16c8:	4f 92       	push	r4
    16ca:	5f 92       	push	r5
    16cc:	6f 92       	push	r6
    16ce:	7f 92       	push	r7
    16d0:	8f 92       	push	r8
    16d2:	9f 92       	push	r9
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	ca 1b       	sub	r28, r26
    16ee:	db 0b       	sbc	r29, r27
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	09 94       	ijmp

000016fc <__epilogue_restores__>:
    16fc:	2a 88       	ldd	r2, Y+18	; 0x12
    16fe:	39 88       	ldd	r3, Y+17	; 0x11
    1700:	48 88       	ldd	r4, Y+16	; 0x10
    1702:	5f 84       	ldd	r5, Y+15	; 0x0f
    1704:	6e 84       	ldd	r6, Y+14	; 0x0e
    1706:	7d 84       	ldd	r7, Y+13	; 0x0d
    1708:	8c 84       	ldd	r8, Y+12	; 0x0c
    170a:	9b 84       	ldd	r9, Y+11	; 0x0b
    170c:	aa 84       	ldd	r10, Y+10	; 0x0a
    170e:	b9 84       	ldd	r11, Y+9	; 0x09
    1710:	c8 84       	ldd	r12, Y+8	; 0x08
    1712:	df 80       	ldd	r13, Y+7	; 0x07
    1714:	ee 80       	ldd	r14, Y+6	; 0x06
    1716:	fd 80       	ldd	r15, Y+5	; 0x05
    1718:	0c 81       	ldd	r16, Y+4	; 0x04
    171a:	1b 81       	ldd	r17, Y+3	; 0x03
    171c:	aa 81       	ldd	r26, Y+2	; 0x02
    171e:	b9 81       	ldd	r27, Y+1	; 0x01
    1720:	ce 0f       	add	r28, r30
    1722:	d1 1d       	adc	r29, r1
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	ed 01       	movw	r28, r26
    1730:	08 95       	ret

00001732 <__umulhisi3>:
    1732:	a2 9f       	mul	r26, r18
    1734:	b0 01       	movw	r22, r0
    1736:	b3 9f       	mul	r27, r19
    1738:	c0 01       	movw	r24, r0
    173a:	a3 9f       	mul	r26, r19
    173c:	70 0d       	add	r23, r0
    173e:	81 1d       	adc	r24, r1
    1740:	11 24       	eor	r1, r1
    1742:	91 1d       	adc	r25, r1
    1744:	b2 9f       	mul	r27, r18
    1746:	70 0d       	add	r23, r0
    1748:	81 1d       	adc	r24, r1
    174a:	11 24       	eor	r1, r1
    174c:	91 1d       	adc	r25, r1
    174e:	08 95       	ret

00001750 <_exit>:
    1750:	f8 94       	cli

00001752 <__stop_program>:
    1752:	ff cf       	rjmp	.-2      	; 0x1752 <__stop_program>
